/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AngelaInterface extends ethers.utils.Interface {
  functions: {
    "append(uint256,bytes32,bytes32,bytes32[])": FunctionFragment;
    "calculateRootHash(uint256,uint256,bytes32,bytes32[])": FunctionFragment;
    "calculateRootHashNoLength(uint256,bytes32,bytes32[])": FunctionFragment;
    "update(uint256,uint256,bytes32,bytes32,bytes32,bytes32[])": FunctionFragment;
    "verify(uint256,uint256,bytes32,bytes32,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "append",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRootHash",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRootHashNoLength",
    values: [BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "append", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRootHashNoLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export class Angela extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AngelaInterface;

  functions: {
    append(
      _len: BigNumberish,
      _oldRoot: BytesLike,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string] & { _newRoot: string }>;

    calculateRootHash(
      _idx: BigNumberish,
      _len: BigNumberish,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string] & { _rootHash: string }>;

    calculateRootHashNoLength(
      _idx: BigNumberish,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string] & { _rootHash: string }>;

    update(
      _idx: BigNumberish,
      _len: BigNumberish,
      _oldRoot: BytesLike,
      _oldLeafHash: BytesLike,
      _newLeafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string] & { _newRoot: string }>;

    verify(
      _idx: BigNumberish,
      _len: BigNumberish,
      _root: BytesLike,
      _oldLeafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  append(
    _len: BigNumberish,
    _oldRoot: BytesLike,
    _leafHash: BytesLike,
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  calculateRootHash(
    _idx: BigNumberish,
    _len: BigNumberish,
    _leafHash: BytesLike,
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  calculateRootHashNoLength(
    _idx: BigNumberish,
    _leafHash: BytesLike,
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  update(
    _idx: BigNumberish,
    _len: BigNumberish,
    _oldRoot: BytesLike,
    _oldLeafHash: BytesLike,
    _newLeafHash: BytesLike,
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string>;

  verify(
    _idx: BigNumberish,
    _len: BigNumberish,
    _root: BytesLike,
    _oldLeafHash: BytesLike,
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    append(
      _len: BigNumberish,
      _oldRoot: BytesLike,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    calculateRootHash(
      _idx: BigNumberish,
      _len: BigNumberish,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    calculateRootHashNoLength(
      _idx: BigNumberish,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    update(
      _idx: BigNumberish,
      _len: BigNumberish,
      _oldRoot: BytesLike,
      _oldLeafHash: BytesLike,
      _newLeafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    verify(
      _idx: BigNumberish,
      _len: BigNumberish,
      _root: BytesLike,
      _oldLeafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    append(
      _len: BigNumberish,
      _oldRoot: BytesLike,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRootHash(
      _idx: BigNumberish,
      _len: BigNumberish,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRootHashNoLength(
      _idx: BigNumberish,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      _idx: BigNumberish,
      _len: BigNumberish,
      _oldRoot: BytesLike,
      _oldLeafHash: BytesLike,
      _newLeafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      _idx: BigNumberish,
      _len: BigNumberish,
      _root: BytesLike,
      _oldLeafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    append(
      _len: BigNumberish,
      _oldRoot: BytesLike,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRootHash(
      _idx: BigNumberish,
      _len: BigNumberish,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRootHashNoLength(
      _idx: BigNumberish,
      _leafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      _idx: BigNumberish,
      _len: BigNumberish,
      _oldRoot: BytesLike,
      _oldLeafHash: BytesLike,
      _newLeafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      _idx: BigNumberish,
      _len: BigNumberish,
      _root: BytesLike,
      _oldLeafHash: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
