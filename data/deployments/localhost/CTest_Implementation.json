{
  "address": "0xf9ec65A1CDf2114197dEc864EA6D89292fbF87Be",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "merkleRootUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINT_WITH_SIG_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contentURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyPayoutAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_royaltyBPS",
          "type": "uint16"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contentURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyPayoutAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_royaltyBPS",
          "type": "uint16"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mintWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contentURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyPayoutAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_royaltyBps",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ICTest.EIP712Signature",
          "name": "_sig",
          "type": "tuple"
        }
      ],
      "name": "mintWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintWithSigNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ICTest.EIP712Signature",
          "name": "_sig",
          "type": "tuple"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "permitNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "royaltyPayoutAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenContentURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenMetadataURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newRoot",
          "type": "bytes32"
        }
      ],
      "name": "updateMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_royaltyPayoutAddress",
          "type": "address"
        }
      ],
      "name": "updateRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contentURI",
          "type": "string"
        }
      ],
      "name": "updateTokenURIs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4c2c514dfa4e468e3ba20880507520336ec1853da830b9576b5c15d717e6488",
  "receipt": {
    "to": null,
    "from": "0x17ff474427dd67E58d3FB785F00200AD8883c31E",
    "contractAddress": "0xf9ec65A1CDf2114197dEc864EA6D89292fbF87Be",
    "transactionIndex": 0,
    "gasUsed": "2720327",
    "logsBloom": "0x
    "blockHash": "0xeb4fbd565292abef03c9c3a6616026ab017ab8d94f00a86db2a1b8444e004190",
    "transactionHash": "0xb4c2c514dfa4e468e3ba20880507520336ec1853da830b9576b5c15d717e6488",
    "logs": [],
    "blockNumber": 13674617,
    "cumulativeGasUsed": "2720327",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7a669e4968b310fe38dcbba06fefb25f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"merkleRootUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_WITH_SIG_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyPayoutAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyBPS\",\"type\":\"uint16\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyPayoutAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyBPS\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyPayoutAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyBps\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ICTest.EIP712Signature\",\"name\":\"_sig\",\"type\":\"tuple\"}],\"name\":\"mintWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintWithSigNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ICTest.EIP712Signature\",\"name\":\"_sig\",\"type\":\"tuple\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permitNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenContentURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMetadataURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyPayoutAddress\",\"type\":\"address\"}],\"name\":\"updateRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentURI\",\"type\":\"string\"}],\"name\":\"updateTokenURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Mint(address,uint256,address,string,string)\":{\"notice\":\"Events\"},\"merkleRootUpdated(bytes32)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"PERMIT_TYPEHASH()\":{\"notice\":\"typehashes\"},\"burn(uint256)\":{\"notice\":\"Basic burn function\"},\"constructor\":{\"notice\":\"ooz upgradeable constructor thingy\"},\"creator(uint256)\":{\"notice\":\"returns creator address of token id\"},\"getURIs(uint256)\":{\"notice\":\"get token URIs\"},\"merkleRoot()\":{\"notice\":\"State variable containing merkle root  see {IAngelaList}\"},\"mint(address,string,string,address,address,uint16)\":{\"notice\":\"MINT FUNCTION params should be calldata in  implementation w/ accesscontrol etc. etc. this just test\"},\"mintWhitelist(address,string,string,address,address,uint16,bytes32[])\":{\"notice\":\"Test function to attempt merkle proof whitelisting\"},\"mintWithSig(address,string,string,address,address,uint16,(uint256,uint8,bytes32,bytes32))\":{\"notice\":\"mint with sig (EIP712)\"},\"owner()\":{\"notice\":\"Basic override for owner interface\"},\"permit(address,uint256,(uint256,uint8,bytes32,bytes32))\":{\"notice\":\"permit modified for ERC-721, based on EIP2612 (zora)\"},\"permitNonces(address,uint256)\":{\"notice\":\"EIP712 shit\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"royalty function, EIP-2981\"},\"royaltyPayoutAddress(uint256)\":{\"notice\":\"returns royalty payout address for token id\"},\"supportsInterface(bytes4)\":{\"notice\":\"supports interface\"},\"tokenContentURI(uint256)\":{\"notice\":\"token content URI\"},\"tokenMetadataURIs(uint256)\":{\"notice\":\"Mappings\"},\"updateMerkleRoot(bytes32)\":{\"notice\":\"update merkle root\"},\"updateRoyaltyInfo(uint256,address)\":{\"notice\":\"update royalty info \"},\"updateTokenURIs(uint256,string,string)\":{\"notice\":\"update tokenURIs \"}},\"notice\":\"TODO: use ext calls for updating content to reduce opsize  add merkle proof, access control\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CTest.sol\":\"CTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x70994ca77f6dce93193d744ed99add51b57aef3e56d42b90889f6a2b1444b6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa22a7520aa91e00d994a8fc0c6e17df8331c3224d87a9079ae8b1a97644cbbbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x3d82fc9292d8d34bc25d104ea743684ad7cc3997397b7284f8dcad0ae70155db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/AngelaList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {MerkleProofUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IAngelaList.sol\\\";\\n\\n/**\\n--------------------------------------------------------------------------------------------------------------------\\n                                                                                        \\n     o                                         o888             ooooo       o88                o8   \\n    888     oo oooooo     oooooooo8 ooooooooo8  888   ooooooo    888        oooo   oooooooo8 o888oo \\n   8  88     888   888  888    88o 888oooooo8   888   ooooo888   888         888  888ooooooo  888   \\n  8oooo88    888   888   888oo888o 888          888 888    888   888      o  888          888 888   \\no88o  o888o o888o o888o 888     888  88oooo888 o888o 88ooo88 8o o888ooooo88 o888o 88oooooo88   888o \\n                         888ooo888       \\n\\n\\\"heute nicht\\\" - Angela Merkel                                                                                                                                                                                                                                                                                                                                                                                                                                       \\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\nTESTNET WIP\\n\\\"AngelaList\\\"                :   Whitelist utility merkle proof contract\\n@author                     :   @bretth18 (computerdata) \\n@title                      :   AngelaList\\n@dev                        :   n/a\\n */\\n\\n\\ncontract AngelaList is IAngelaList, OwnableUpgradeable {\\n\\n    /// State variable containing merkle root \\n    /// see {IAngelaList}\\n    bytes32 public override merkleRoot;\\n\\n    /// Events\\n    event merkleRootUpdated(bytes32 _merkleRoot);\\n\\n\\n\\n    /// update merkle root\\n    function updateMerkleRoot(bytes32 _newRoot) public onlyOwner {\\n        merkleRoot = _newRoot;\\n        emit merkleRootUpdated(merkleRoot);\\n    }\\n\\n    /// return leaf\\n    function leaf(address _account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account));\\n    }\\n\\n    /// verify proof\\n    function verify(bytes32 _leaf, bytes32[] memory _proof) internal view returns (bool) {\\n        return MerkleProofUpgradeable.verify(_proof, merkleRoot, _leaf);\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x04f3bef49d2cf104fe9a23e3e92ef3a8757f7e13016f18f3a77e1888190cffe7\",\"license\":\"MIT\"},\"contracts/CTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport {ICTest} from \\\"./interfaces/ICTest.sol\\\";\\nimport {AngelaList} from \\\"./AngelaList.sol\\\";\\n// import {Royalties} from \\\"./Royalties.sol\\\";\\n\\n/**\\n--------------------------------------------------------------------------------------------------------------------\\n                                                                                        \\n  _____   _______     _____  ______   _______   \\n /\\\\ __/\\\\/\\\\_______)\\\\ /\\\\_____\\\\/ ____/\\\\/\\\\_______)\\\\ \\n ) )__\\\\/\\\\(___  __\\\\/( (_____/) ) __\\\\/\\\\(___  __\\\\/ \\n/ / /     / / /     \\\\ \\\\__\\\\   \\\\ \\\\ \\\\    / / /     \\n\\\\ \\\\ \\\\_   ( ( (      / /__/_  _\\\\ \\\\ \\\\  ( ( (      \\n ) )__/\\\\  \\\\ \\\\ \\\\    ( (_____\\\\)____) )  \\\\ \\\\ \\\\     \\n \\\\/___\\\\/  /_/_/     \\\\/_____/\\\\____\\\\/   /_/_/     \\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\nTESTNET WIP\\n\\\"CTest\\\"                     :   WIP starting ground for cNFT's\\n@author                     :   @bretth18 (computerdata) \\n@title                      :   CTest\\n@dev                        :   currently setup w/ minimal access control and upgraeability. \\n                                does not implement market level functionality via zora v3 modules (TBD)\\n */\\n\\n/// TODO:\\n/// use ext calls for updating content to reduce opsize \\n/// add merkle proof, access control\\n\\ncontract CTest is\\n    ICTest,\\n    ERC721Upgradeable,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable,\\n    AngelaList\\n    // Royalties\\n    \\n{\\n\\n\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    /// Events\\n    event Mint(address indexed, uint256 indexed, address indexed, string, string);\\n\\n    /// Mappings\\n    mapping(uint256 => string) public tokenMetadataURIs;\\n    /// TODO: add a bunch of mapping types\\n\\n    /// mappy the token data to the token id yeah oh yeah\\n    mapping(uint256 => TokenData) private tokenData;\\n\\n    /// EIP712 shit\\n    mapping(address => mapping(uint256 => uint256)) public permitNonces;\\n\\n    mapping(address => uint256) public mintWithSigNonces;\\n\\n\\n    /// typehashes\\n    // bytes32 public constant PERMIT_TYPEHASH = keccack256 blah blah blah;\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256('Permit(address, uint256, uint256, uint256)');\\n    bytes32 public constant MINT_WITH_SIG_TYPEHASH = keccak256('MintWithSig(address, uint256, address, string, string)');\\n\\n\\n    // Tracking token Id\\n    CountersUpgradeable.Counter private _tokenIdCounter;\\n\\n\\n    /// Modifiers\\n\\n    /// Check if token exists\\n    modifier tokenExists(uint256 _tokenId) {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n        _;\\n    }\\n\\n\\n    /// ooz upgradeable constructor thingy\\n    constructor() initializer{}\\n\\n\\n    function initialize(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol\\n    ) public initializer {\\n\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        // Set ownership to the og sender\\n        transferOwnership(_owner);\\n\\n\\n        // Set tokenId to start @ 1\\n        _tokenIdCounter.increment();\\n\\n    }\\n\\n\\n\\n    /// Basic override for owner interface\\n    function owner() public view override(OwnableUpgradeable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    /// Basic burn function\\n    function burn(uint256 _tokenId) public onlyOwner {\\n        require(_exists(_tokenId));\\n        // require(_isApprovedOrOwner(_msgSender(), _tokenId), \\\"Not Approved!\\\");\\n        _burn(_tokenId);\\n    }\\n\\n\\n    /// get token URIs\\n    function getURIs(uint256 _tokenId) public view returns (string memory, string memory) {\\n\\n        TokenData memory data = tokenData[_tokenId];\\n        \\n        return (data.metadataURI, data.contentURI);\\n    }\\n\\n\\n    /// token content URI\\n    function tokenContentURI(uint256 _tokenId) public view returns (string memory) {\\n        return tokenData[_tokenId].contentURI;\\n    }\\n    \\n    /// returns creator address of token id\\n    function creator(uint256 _tokenId) public view  returns (address) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        return tokenData[_tokenId].creator;\\n    }\\n\\n    /// returns royalty payout address for token id\\n    function royaltyPayoutAddress(uint256 _tokenId) public view returns (address) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        return tokenData[_tokenId].royaltyPayout;\\n    }\\n\\n\\n    /// MINT FUNCTION\\n    /// params should be calldata in  implementation w/ accesscontrol etc. etc. this just test\\n    function mint(\\n        address to,\\n        string memory _metadataURI,\\n        string memory _contentURI,\\n        address _creator,\\n        address _royaltyPayoutAddress,\\n        uint16 _royaltyBPS\\n    ) public {\\n\\n        require(_royaltyBPS < 10000, \\\"royalty too high! calm down!\\\");\\n\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _safeMint(to, tokenId);\\n\\n        tokenData[tokenId] = TokenData({\\n            metadataURI: _metadataURI,\\n            contentURI: _contentURI,\\n            creator: _creator,\\n            royaltyPayout: _royaltyPayoutAddress,\\n            royaltyBPS: _royaltyBPS\\n        });\\n\\n        // event time \\n        emit Mint(_msgSender(), tokenId,  _creator, _metadataURI, _contentURI);\\n\\n        /// todo: set royalty type function here\\n\\n    \\n\\n        /// increase tokenid\\n        _tokenIdCounter.increment();\\n        \\n\\n    }\\n\\n    /// Test function to attempt merkle proof whitelisting\\n    function mintWhitelist(\\n        address to,\\n        string memory _metadataURI,\\n        string memory _contentURI,\\n        address _creator,\\n        address _royaltyPayoutAddress,\\n        uint16 _royaltyBPS,\\n        bytes32[] calldata _proof\\n    ) external {\\n\\n        /// call angela\\n        require(verify(leaf(_creator), _proof), \\\"invalid proof\\\");\\n\\n        require(_royaltyBPS < 10000, \\\"royalty too high! calm down!\\\");\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _safeMint(to, tokenId);\\n\\n        tokenData[tokenId] = TokenData({\\n            metadataURI: _metadataURI,\\n            contentURI: _contentURI,\\n            creator: _creator,\\n            royaltyPayout: _royaltyPayoutAddress,\\n            royaltyBPS: _royaltyBPS\\n        });\\n\\n        // event time \\n        emit Mint(_msgSender(), tokenId,  _creator, _metadataURI, _contentURI);\\n\\n        /// todo: set royalty type function here\\n\\n        /// increase tokenid\\n        _tokenIdCounter.increment();\\n    \\n    }\\n\\n\\n    /// mint with sig (EIP712)\\n    function mintWithSig(\\n        address to,\\n        string memory _metadataURI,\\n        string memory _contentURI,\\n        address _creator,\\n        address _royaltyPayoutAddress,\\n        uint16 _royaltyBps,\\n        EIP712Signature memory _sig\\n    ) public {\\n\\n        require(_sig.deadline == 0 || _sig.deadline > block.timestamp, \\\"mintWithSig expired\\\");\\n\\n        bytes32 domainSeparator = _calculateDomainSeparator();\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                keccak256(\\n                    abi.encode(\\n                        MINT_WITH_SIG_TYPEHASH,\\n                        _royaltyBps,\\n                        mintWithSigNonces[_creator]++,\\n                        _sig.deadline\\n                    )\\n                )\\n            )\\n        );\\n        /// elyptic curve baby\\n        address recoveredAddress = ecrecover(digest, _sig.v, _sig.r, _sig.s);\\n\\n\\n        require(\\n            recoveredAddress != address(0) && _creator == recoveredAddress,\\n            \\\"Invalid Signature! wyd!!!\\\"\\n        );\\n\\n\\n\\n    }\\n\\n\\n\\n    function _calculateDomainSeparator() internal view returns (bytes32) {\\n        /// lifted from zora wtf,\\n        uint256 chainID;\\n        \\n        assembly {\\n            chainID := chainid()\\n        }\\n        /// yeah yeah yeah \\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name, string version, uint256 chainId, address verifiyingContract)\\\"\\n                ),\\n                keccak256(bytes(\\\"Catalog\\\")),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainID,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n\\n    /// permit modified for ERC-721, based on EIP2612 (zora)\\n    function permit(\\n        address _to, \\n        uint256 _tokenId, \\n        EIP712Signature memory _sig\\n    ) public override {\\n        require(\\n            _sig.deadline == 0 || _sig.deadline >= block.timestamp,\\n            \\\"Permit expired!\\\"\\n        );\\n        /// check if black hole\\n        require(_to != address(0), \\\"Recipient cannot be 0x0\\\");\\n\\n        bytes32 domainSeparator = _calculateDomainSeparator();\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        _to,\\n                        _tokenId,\\n                        permitNonces[ownerOf(_tokenId)][_tokenId]++,\\n                        _sig.deadline\\n                    )\\n                )\\n            )\\n        );\\n\\n        /// recover ecdsa\\n        address recoveredAddress = ecrecover(digest, _sig.v, _sig.r, _sig.s);\\n\\n\\n        require(\\n            recoveredAddress != address(0) && ownerOf(_tokenId) == recoveredAddress,\\n            \\\"Invalid Signature! hey!!\\\"\\n        );\\n\\n        _approve(_to, _tokenId);\\n    }\\n\\n\\n    /// update tokenURIs \\n    function updateTokenURIs(\\n        uint256 _tokenId,\\n        string memory _metadataURI,\\n        string memory _contentURI\\n    ) public onlyOwner {\\n\\n        tokenData[_tokenId].metadataURI = _metadataURI;\\n        tokenData[_tokenId].contentURI = _contentURI;\\n    \\n    \\n        // event heree!\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        return tokenData[_tokenId].metadataURI;\\n    }\\n\\n    /// update royalty info \\n    function updateRoyaltyInfo(uint256 _tokenId, address _royaltyPayoutAddress) public onlyOwner {\\n        /// TODO make ext call to royalty contract to handle changes\\n        tokenData[_tokenId].royaltyPayout = _royaltyPayoutAddress;\\n\\n        // this should broadcast an event!\\n    }\\n\\n    /// royalty function, EIP-2981\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) \\n        external \\n        view \\n        override \\n        returns (address receiver, uint256 royaltyAmount) {\\n\\n        /// Don't give royalties to a bottomless pit lol. \\n        if(owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n\\n        return (owner(), (_salePrice * tokenData[_tokenId].royaltyBPS) / 10_000);\\n    }\\n    \\n\\n    /// supports interface\\n    function supportsInterface(bytes4 interfaceId)\\n        public \\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool) {\\n        \\n        return \\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    \\n    }\\n\\n}\\n\\n\\n\",\"keccak256\":\"0xe1aec97451baa48903f070cd0e839d2415ac93ac3b9ae496712927ae057b0ad5\",\"license\":\"MIT\"},\"contracts/interfaces/IAngelaList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// SPDX-License-Identifer: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAngelaList {\\n\\n    // returns the merkle root of the merkle tree containing whitelisted accounts\\n    function merkleRoot() external view returns (bytes32);\\n    \\n\\n\\n    // \\n}\",\"keccak256\":\"0x83236438923d4f6eb19a92ddbac4d2a39a5791946e1709fa8dcec7a0652268e6\",\"license\":\"MIT\"},\"contracts/interfaces/ICTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n\\n/// base interface for Catalog cNFT TEST\\ninterface ICTest {\\n\\n    /// EIP712 sig\\n    struct EIP712Signature {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /// token data (metadata and content)\\n    struct TokenData {\\n        string metadataURI;\\n        string contentURI;\\n        address creator;\\n        address royaltyPayout;\\n        uint16 royaltyBPS;\\n    }\\n\\n    /// EIP-712\\n    function mintWithSig(\\n        address _to,\\n        string memory _metadataURI,\\n        string memory _contentURI,\\n        address _creator,\\n        address _royaltyPayoutAddress,\\n        uint16 _royaltyBPS,\\n        EIP712Signature calldata _signature\\n\\n    ) external;\\n\\n    function permit(\\n        address spender,\\n        uint256 _tokenId,\\n        EIP712Signature calldata _signature\\n    ) external;\\n\\n    // function mint(TokenData calldata data) external; /// market shit needs to go here\\n\\n\\n    // /// EIP712 sig\\n    // function mintWithSig(TokenData calldata data, EIP712Signature calldata sig) external;\\n\\n\\n    // /// update token content URI (access controlled)\\n    // function updateTokenContentURI(uint256 tokenId, string calldata contentURI) external;\\n\\n    // /// update token metadata URI (access controlled)\\n    // function updateTokenMetadataURI(uint256 tokenId, string calldata metadataURI) external;\\n\\n\\n    // /// revoke token approval\\n    // function revokeApproval(uint256 tokenId) external;\\n\\n\\n    // /// EIP712 permit, sts an approved spender given valid sig\\n    // function permit(address spender, uint256 tokenId, EIP712Signature calldata sig) external;\\n\\n    // Burn token\\n    function burn(uint256 tokenId) external;\\n}\",\"keccak256\":\"0x34c4f0dff3d2fc1a1b07a3f0d85117e14ccb66d4b6bd38f79266b6dce26c1c93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff16806200002c575060005460ff16155b620000945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000b7576000805461ffff19166101011790555b8015620000ca576000805461ff00191690555b50612fca80620000db6000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80636352211e11610125578063b88d4fde116100ad578063de5236fb1161007c578063de5236fb146104d0578063e985e9c5146104f7578063f2fde38b14610533578063f8ccd5de14610546578063fbd8d2831461057157600080fd5b8063b88d4fde14610484578063c87b56dd14610497578063ce3d22e4146104aa578063cf115716146104bd57600080fd5b8063715018a6116100f4578063715018a6146104465780638da5cb5b1461044e578063906571471461045657806395d89b4114610469578063a22cb4651461047157600080fd5b80636352211e146103ec57806364e9293e146103ff578063669d311c1461042057806370a082311461043357600080fd5b80632a55205a116101a857806342842e0e1161017757806342842e0e1461038d57806342966c68146103a057806344dcc232146103b35780634783f0ef146103c6578063510b5158146103d957600080fd5b80632a55205a146103185780632a9da7041461034a5780632eb4a7ab1461035d57806330adf81f1461036657600080fd5b80630bcd899b116101ef5780630bcd899b1461029e5780630c0a9d26146102cc5780630e2a1778146102df5780631cbbc6e2146102f257806323b872dd1461030557600080fd5b806301ffc9a71461022157806306fdde0314610249578063081812fc1461025e578063095ea7b314610289575b600080fd5b61023461022f3660046125cb565b610584565b60405190151581526020015b60405180910390f35b6102516105af565b6040516102409190612635565b61027161026c366004612648565b610641565b6040516001600160a01b039091168152602001610240565b61029c61029736600461267d565b6106ce565b005b6102be6102ac3660046126a7565b60cd6020526000908152604090205481565b604051908152602001610240565b6102516102da366004612648565b6107e4565b61029c6102ed36600461274d565b610889565b61029c610300366004612820565b610b33565b61029c61031336600461288d565b610bad565b61032b6103263660046128c9565b610bde565b604080516001600160a01b039093168352602083019190915201610240565b61029c6103583660046128fd565b610c55565b6102be60c95481565b6102be7f1914ff5eed5bebce4e460efe8ca2cb12820f649e7a2f467f8bcbe84808e5972481565b61029c61039b36600461288d565b610e79565b61029c6103ae366004612648565b610e94565b6102516103c1366004612648565b610ee1565b61029c6103d4366004612648565b610f7b565b6102716103e7366004612648565b610fe5565b6102716103fa366004612648565b61102b565b61041261040d366004612648565b6110a2565b6040516102409291906129b6565b61029c61042e3660046129e4565b611230565b6102be6104413660046126a7565b611290565b61029c611317565b610271611352565b61029c610464366004612a10565b61136b565b610251611402565b61029c61047f366004612a4b565b611411565b61029c610492366004612a87565b6114d6565b6102516104a5366004612648565b611508565b61029c6104b8366004612b03565b611548565b61029c6104cb366004612ba8565b6116e2565b6102be7fd4d28b9b4e3ac4e47c619c8d769ef53b84fb230b16466cf9dacfefec9772654b81565b610234610505366004612ca9565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61029c6105413660046126a7565b61192f565b6102be61055436600461267d565b60cc60209081526000928352604080842090915290825290205481565b61027161057f366004612648565b6119cc565b600063152a902d60e11b6001600160e01b0319831614806105a957506105a982611a12565b92915050565b6060606580546105be90612cd3565b80601f01602080910402602001604051908101604052809291908181526020018280546105ea90612cd3565b80156106375780601f1061060c57610100808354040283529160200191610637565b820191906000526020600020905b81548152906001019060200180831161061a57829003601f168201915b5050505050905090565b600061064c82611a62565b6106b25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006106d98261102b565b9050806001600160a01b0316836001600160a01b031614156107475760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106a9565b336001600160a01b038216148061076357506107638133610505565b6107d55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106a9565b6107df8383611a7f565b505050565b600081815260cb6020526040902060010180546060919061080490612cd3565b80601f016020809104026020016040519081016040528092919081815260200182805461083090612cd3565b801561087d5780601f106108525761010080835404028352916020019161087d565b820191906000526020600020905b81548152906001019060200180831161086057829003601f168201915b50505050509050919050565b80511580610898575080514211155b6108d65760405162461bcd60e51b815260206004820152600f60248201526e5065726d697420657870697265642160881b60448201526064016106a9565b6001600160a01b03831661092c5760405162461bcd60e51b815260206004820152601760248201527f526563697069656e742063616e6e6f742062652030783000000000000000000060448201526064016106a9565b6000610936611aed565b90506000817f1914ff5eed5bebce4e460efe8ca2cb12820f649e7a2f467f8bcbe84808e59724868660cc600061096b8a61102b565b6001600160a01b03168152602080820192909252604090810160009081208b8252909252812080549161099d83612d24565b9091555087516040805160208101969096526001600160a01b03909416938501939093526060840191909152608083015260a082015260c00160405160208183030381529060405280519060200120604051602001610a1392919061190160f01b81526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600060018285602001518660400151876060015160405160008152602001604052604051610a75949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610a97573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610ad55750806001600160a01b0316610aca8661102b565b6001600160a01b0316145b610b215760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964205369676e617475726521206865792121000000000000000060448201526064016106a9565b610b2b8686611a7f565b505050505050565b33610b3c611352565b6001600160a01b031614610b625760405162461bcd60e51b81526004016106a990612d3f565b600083815260cb602090815260409091208351610b819285019061251c565b50600083815260cb602090815260409091208251610ba79260019092019184019061251c565b50505050565b610bb73382611bbb565b610bd35760405162461bcd60e51b81526004016106a990612d74565b6107df838383611ca5565b60008080610bea611352565b6001600160a01b03161415610c0c57610c01611352565b600091509150610c4e565b610c14611352565b600085815260cb602052604090206003015461271090610c3f90600160a01b900461ffff1686612dc5565b610c499190612de4565b915091505b9250929050565b80511580610c635750805142105b610ca55760405162461bcd60e51b81526020600482015260136024820152721b5a5b9d15da5d1a14da59c8195e1c1a5c9959606a1b60448201526064016106a9565b6000610caf611aed565b6001600160a01b038616600090815260cd602052604081208054929350909183917fd4d28b9b4e3ac4e47c619c8d769ef53b84fb230b16466cf9dacfefec9772654b91879185610cfe83612d24565b90915550865160408051602081019590955261ffff909316928401929092526060830152608082015260a00160405160208183030381529060405280519060200120604051602001610d6792919061190160f01b81526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600060018285602001518660400151876060015160405160008152602001604052604051610dc9949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610deb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610e215750806001600160a01b0316876001600160a01b0316145b610e6d5760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964205369676e617475726521207779642121210000000000000060448201526064016106a9565b50505050505050505050565b6107df838383604051806020016040528060008152506114d6565b33610e9d611352565b6001600160a01b031614610ec35760405162461bcd60e51b81526004016106a990612d3f565b610ecc81611a62565b610ed557600080fd5b610ede81611e45565b50565b60ca6020526000908152604090208054610efa90612cd3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2690612cd3565b8015610f735780601f10610f4857610100808354040283529160200191610f73565b820191906000526020600020905b815481529060010190602001808311610f5657829003601f168201915b505050505081565b33610f84611352565b6001600160a01b031614610faa5760405162461bcd60e51b81526004016106a990612d3f565b60c98190556040518181527fa2bc4a36b1e221bdcc16df9d7c15559a5f4f9902519c0f92ad3198f1df005e8b9060200160405180910390a150565b6000610ff082611a62565b61100c5760405162461bcd60e51b81526004016106a990612e06565b50600090815260cb60205260409020600201546001600160a01b031690565b6000818152606760205260408120546001600160a01b0316806105a95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106a9565b606080600060cb60008581526020019081526020016000206040518060a00160405290816000820180546110d590612cd3565b80601f016020809104026020016040519081016040528092919081815260200182805461110190612cd3565b801561114e5780601f106111235761010080835404028352916020019161114e565b820191906000526020600020905b81548152906001019060200180831161113157829003601f168201915b5050505050815260200160018201805461116790612cd3565b80601f016020809104026020016040519081016040528092919081815260200182805461119390612cd3565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b505050918352505060028201546001600160a01b039081166020808401919091526003909301549081166040830152600160a01b900461ffff166060909101528151910151909590945092505050565b33611239611352565b6001600160a01b03161461125f5760405162461bcd60e51b81526004016106a990612d3f565b600091825260cb602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b0382166112fb5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106a9565b506001600160a01b031660009081526068602052604090205490565b33611320611352565b6001600160a01b0316146113465760405162461bcd60e51b81526004016106a990612d3f565b6113506000611ee0565b565b60006113666097546001600160a01b031690565b905090565b600054610100900460ff1680611384575060005460ff16155b6113a05760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff161580156113c2576000805461ffff19166101011790555b6113cc8383611f32565b6113d4611fb9565b6113dd8461192f565b6113eb60ce80546001019055565b8015610ba7576000805461ff001916905550505050565b6060606680546105be90612cd3565b6001600160a01b03821633141561146a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106a9565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6114e03383611bbb565b6114fc5760405162461bcd60e51b81526004016106a990612d74565b610ba784848484612034565b606061151382611a62565b61152f5760405162461bcd60e51b81526004016106a990612e06565b600082815260cb60205260409020805461080490612cd3565b6127108161ffff161061159d5760405162461bcd60e51b815260206004820152601c60248201527f726f79616c747920746f6f2068696768212063616c6d20646f776e210000000060448201526064016106a9565b60006115a860ce5490565b90506115b48782612067565b6040805160a08101825287815260208082018890526001600160a01b03808816838501528616606083015261ffff85166080830152600084815260cb825292909220815180519293919261160b928492019061251c565b506020828101518051611624926001850192019061251c565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b0319909416928216929092179290921790558416816116893390565b6001600160a01b03167fe2c569ed71e28d19c0a19f2527b47c361721165c00055e89f3d82b55b59831ca89896040516116c39291906129b6565b60405180910390a46116d960ce80546001019055565b50505050505050565b60408051606087901b6bffffffffffffffffffffffff191660208083019190915282516014818403018152603490920190925280519101206117579083838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061208592505050565b6117935760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b210383937b7b360991b60448201526064016106a9565b6127108361ffff16106117e85760405162461bcd60e51b815260206004820152601c60248201527f726f79616c747920746f6f2068696768212063616c6d20646f776e210000000060448201526064016106a9565b60006117f360ce5490565b90506117ff8982612067565b6040805160a08101825289815260208082018a90526001600160a01b03808a16838501528816606083015261ffff87166080830152600084815260cb8252929092208151805192939192611856928492019061251c565b50602082810151805161186f926001850192019061251c565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b0319909416928216929092179290921790558616816118d43390565b6001600160a01b03167fe2c569ed71e28d19c0a19f2527b47c361721165c00055e89f3d82b55b59831ca8b8b60405161190e9291906129b6565b60405180910390a461192460ce80546001019055565b505050505050505050565b33611938611352565b6001600160a01b03161461195e5760405162461bcd60e51b81526004016106a990612d3f565b6001600160a01b0381166119c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106a9565b610ede81611ee0565b60006119d782611a62565b6119f35760405162461bcd60e51b81526004016106a990612e06565b50600090815260cb60205260409020600301546001600160a01b031690565b60006001600160e01b031982166380ac58cd60e01b1480611a4357506001600160e01b03198216635b5e139f60e01b145b806105a957506301ffc9a760e01b6001600160e01b03198316146105a9565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611ab48261102b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6040805180820182526007815266436174616c6f6760c81b6020918201528151808301835260018152603160f81b9082015281517f6e9418f1dc20e379635b80ae8c9349271c00ea6c1496ad038731c99675489b76818301527f8f0622725b119d5873cf2bf856aa64635dc2f13ccd3382c9f04efc04e5d12d32818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012090565b6000611bc682611a62565b611c275760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106a9565b6000611c328361102b565b9050806001600160a01b0316846001600160a01b03161480611c6d5750836001600160a01b0316611c6284610641565b6001600160a01b0316145b80611c9d57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611cb88261102b565b6001600160a01b031614611d205760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106a9565b6001600160a01b038216611d825760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106a9565b611d8d600082611a7f565b6001600160a01b0383166000908152606860205260408120805460019290611db6908490612ea3565b90915550506001600160a01b0382166000908152606860205260408120805460019290611de4908490612eba565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611e508261102b565b9050611e5d600083611a7f565b6001600160a01b0381166000908152606860205260408120805460019290611e86908490612ea3565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680611f4b575060005460ff16155b611f675760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff16158015611f89576000805461ffff19166101011790555b611f9161209b565b611f9961209b565b611fa38383612105565b80156107df576000805461ff0019169055505050565b600054610100900460ff1680611fd2575060005460ff16155b611fee5760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff16158015612010576000805461ffff19166101011790555b61201861209b565b61202061219a565b8015610ede576000805461ff001916905550565b61203f848484611ca5565b61204b848484846121fa565b610ba75760405162461bcd60e51b81526004016106a990612ed2565b612081828260405180602001604052806000815250612307565b5050565b60006120948260c9548561233a565b9392505050565b600054610100900460ff16806120b4575060005460ff16155b6120d05760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff16158015612020576000805461ffff19166101011790558015610ede576000805461ff001916905550565b600054610100900460ff168061211e575060005460ff16155b61213a5760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff1615801561215c576000805461ffff19166101011790555b825161216f90606590602086019061251c565b50815161218390606690602085019061251c565b5080156107df576000805461ff0019169055505050565b600054610100900460ff16806121b3575060005460ff16155b6121cf5760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff161580156121f1576000805461ffff19166101011790555b61202033611ee0565b60006001600160a01b0384163b156122fc57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061223e903390899088908890600401612f24565b602060405180830381600087803b15801561225857600080fd5b505af1925050508015612288575060408051601f3d908101601f1916820190925261228591810190612f61565b60015b6122e2573d8080156122b6576040519150601f19603f3d011682016040523d82523d6000602084013e6122bb565b606091505b5080516122da5760405162461bcd60e51b81526004016106a990612ed2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611c9d565b506001949350505050565b61231183836123e9565b61231e60008484846121fa565b6107df5760405162461bcd60e51b81526004016106a990612ed2565b600081815b85518110156123de57600086828151811061235c5761235c612f7e565b6020026020010151905080831161239e5760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506123cb565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806123d681612d24565b91505061233f565b509092149392505050565b6001600160a01b03821661243f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106a9565b61244881611a62565b156124955760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106a9565b6001600160a01b03821660009081526068602052604081208054600192906124be908490612eba565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461252890612cd3565b90600052602060002090601f01602090048101928261254a5760008555612590565b82601f1061256357805160ff1916838001178555612590565b82800160010185558215612590579182015b82811115612590578251825591602001919060010190612575565b5061259c9291506125a0565b5090565b5b8082111561259c57600081556001016125a1565b6001600160e01b031981168114610ede57600080fd5b6000602082840312156125dd57600080fd5b8135612094816125b5565b6000815180845260005b8181101561260e576020818501810151868301820152016125f2565b81811115612620576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061209460208301846125e8565b60006020828403121561265a57600080fd5b5035919050565b80356001600160a01b038116811461267857600080fd5b919050565b6000806040838503121561269057600080fd5b61269983612661565b946020939093013593505050565b6000602082840312156126b957600080fd5b61209482612661565b634e487b7160e01b600052604160045260246000fd5b6000608082840312156126ea57600080fd5b6040516080810181811067ffffffffffffffff8211171561270d5761270d6126c2565b60405282358152905080602083013560ff8116811461272b57600080fd5b8060208301525060408301356040820152606083013560608201525092915050565b600080600060c0848603121561276257600080fd5b61276b84612661565b92506020840135915061278185604086016126d8565b90509250925092565b600067ffffffffffffffff808411156127a5576127a56126c2565b604051601f8501601f19908116603f011681019082821181831017156127cd576127cd6126c2565b816040528093508581528686860111156127e657600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261281157600080fd5b6120948383356020850161278a565b60008060006060848603121561283557600080fd5b83359250602084013567ffffffffffffffff8082111561285457600080fd5b61286087838801612800565b9350604086013591508082111561287657600080fd5b5061288386828701612800565b9150509250925092565b6000806000606084860312156128a257600080fd5b6128ab84612661565b92506128b960208501612661565b9150604084013590509250925092565b600080604083850312156128dc57600080fd5b50508035926020909101359150565b803561ffff8116811461267857600080fd5b6000806000806000806000610140888a03121561291957600080fd5b61292288612661565b9650602088013567ffffffffffffffff8082111561293f57600080fd5b61294b8b838c01612800565b975060408a013591508082111561296157600080fd5b5061296e8a828b01612800565b95505061297d60608901612661565b935061298b60808901612661565b925061299960a089016128eb565b91506129a88960c08a016126d8565b905092959891949750929550565b6040815260006129c960408301856125e8565b82810360208401526129db81856125e8565b95945050505050565b600080604083850312156129f757600080fd5b82359150612a0760208401612661565b90509250929050565b600080600060608486031215612a2557600080fd5b612a2e84612661565b9250602084013567ffffffffffffffff8082111561285457600080fd5b60008060408385031215612a5e57600080fd5b612a6783612661565b915060208301358015158114612a7c57600080fd5b809150509250929050565b60008060008060808587031215612a9d57600080fd5b612aa685612661565b9350612ab460208601612661565b925060408501359150606085013567ffffffffffffffff811115612ad757600080fd5b8501601f81018713612ae857600080fd5b612af78782356020840161278a565b91505092959194509250565b60008060008060008060c08789031215612b1c57600080fd5b612b2587612661565b9550602087013567ffffffffffffffff80821115612b4257600080fd5b612b4e8a838b01612800565b96506040890135915080821115612b6457600080fd5b50612b7189828a01612800565b945050612b8060608801612661565b9250612b8e60808801612661565b9150612b9c60a088016128eb565b90509295509295509295565b60008060008060008060008060e0898b031215612bc457600080fd5b612bcd89612661565b9750602089013567ffffffffffffffff80821115612bea57600080fd5b612bf68c838d01612800565b985060408b0135915080821115612c0c57600080fd5b612c188c838d01612800565b9750612c2660608c01612661565b9650612c3460808c01612661565b9550612c4260a08c016128eb565b945060c08b0135915080821115612c5857600080fd5b818b0191508b601f830112612c6c57600080fd5b813581811115612c7b57600080fd5b8c60208260051b8501011115612c9057600080fd5b6020830194508093505050509295985092959890939650565b60008060408385031215612cbc57600080fd5b612cc583612661565b9150612a0760208401612661565b600181811c90821680612ce757607f821691505b60208210811415612d0857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d3857612d38612d0e565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000816000190483118215151615612ddf57612ddf612d0e565b500290565b600082612e0157634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082821015612eb557612eb5612d0e565b500390565b60008219821115612ecd57612ecd612d0e565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612f57908301846125e8565b9695505050505050565b600060208284031215612f7357600080fd5b8151612094816125b5565b634e487b7160e01b600052603260045260246000fdfea26469706673582212206414d295929d9b3e4d751d6bf304ba56494f6837558e31f857d51d4a25c5626964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c80636352211e11610125578063b88d4fde116100ad578063de5236fb1161007c578063de5236fb146104d0578063e985e9c5146104f7578063f2fde38b14610533578063f8ccd5de14610546578063fbd8d2831461057157600080fd5b8063b88d4fde14610484578063c87b56dd14610497578063ce3d22e4146104aa578063cf115716146104bd57600080fd5b8063715018a6116100f4578063715018a6146104465780638da5cb5b1461044e578063906571471461045657806395d89b4114610469578063a22cb4651461047157600080fd5b80636352211e146103ec57806364e9293e146103ff578063669d311c1461042057806370a082311461043357600080fd5b80632a55205a116101a857806342842e0e1161017757806342842e0e1461038d57806342966c68146103a057806344dcc232146103b35780634783f0ef146103c6578063510b5158146103d957600080fd5b80632a55205a146103185780632a9da7041461034a5780632eb4a7ab1461035d57806330adf81f1461036657600080fd5b80630bcd899b116101ef5780630bcd899b1461029e5780630c0a9d26146102cc5780630e2a1778146102df5780631cbbc6e2146102f257806323b872dd1461030557600080fd5b806301ffc9a71461022157806306fdde0314610249578063081812fc1461025e578063095ea7b314610289575b600080fd5b61023461022f3660046125cb565b610584565b60405190151581526020015b60405180910390f35b6102516105af565b6040516102409190612635565b61027161026c366004612648565b610641565b6040516001600160a01b039091168152602001610240565b61029c61029736600461267d565b6106ce565b005b6102be6102ac3660046126a7565b60cd6020526000908152604090205481565b604051908152602001610240565b6102516102da366004612648565b6107e4565b61029c6102ed36600461274d565b610889565b61029c610300366004612820565b610b33565b61029c61031336600461288d565b610bad565b61032b6103263660046128c9565b610bde565b604080516001600160a01b039093168352602083019190915201610240565b61029c6103583660046128fd565b610c55565b6102be60c95481565b6102be7f1914ff5eed5bebce4e460efe8ca2cb12820f649e7a2f467f8bcbe84808e5972481565b61029c61039b36600461288d565b610e79565b61029c6103ae366004612648565b610e94565b6102516103c1366004612648565b610ee1565b61029c6103d4366004612648565b610f7b565b6102716103e7366004612648565b610fe5565b6102716103fa366004612648565b61102b565b61041261040d366004612648565b6110a2565b6040516102409291906129b6565b61029c61042e3660046129e4565b611230565b6102be6104413660046126a7565b611290565b61029c611317565b610271611352565b61029c610464366004612a10565b61136b565b610251611402565b61029c61047f366004612a4b565b611411565b61029c610492366004612a87565b6114d6565b6102516104a5366004612648565b611508565b61029c6104b8366004612b03565b611548565b61029c6104cb366004612ba8565b6116e2565b6102be7fd4d28b9b4e3ac4e47c619c8d769ef53b84fb230b16466cf9dacfefec9772654b81565b610234610505366004612ca9565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61029c6105413660046126a7565b61192f565b6102be61055436600461267d565b60cc60209081526000928352604080842090915290825290205481565b61027161057f366004612648565b6119cc565b600063152a902d60e11b6001600160e01b0319831614806105a957506105a982611a12565b92915050565b6060606580546105be90612cd3565b80601f01602080910402602001604051908101604052809291908181526020018280546105ea90612cd3565b80156106375780601f1061060c57610100808354040283529160200191610637565b820191906000526020600020905b81548152906001019060200180831161061a57829003601f168201915b5050505050905090565b600061064c82611a62565b6106b25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006106d98261102b565b9050806001600160a01b0316836001600160a01b031614156107475760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106a9565b336001600160a01b038216148061076357506107638133610505565b6107d55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106a9565b6107df8383611a7f565b505050565b600081815260cb6020526040902060010180546060919061080490612cd3565b80601f016020809104026020016040519081016040528092919081815260200182805461083090612cd3565b801561087d5780601f106108525761010080835404028352916020019161087d565b820191906000526020600020905b81548152906001019060200180831161086057829003601f168201915b50505050509050919050565b80511580610898575080514211155b6108d65760405162461bcd60e51b815260206004820152600f60248201526e5065726d697420657870697265642160881b60448201526064016106a9565b6001600160a01b03831661092c5760405162461bcd60e51b815260206004820152601760248201527f526563697069656e742063616e6e6f742062652030783000000000000000000060448201526064016106a9565b6000610936611aed565b90506000817f1914ff5eed5bebce4e460efe8ca2cb12820f649e7a2f467f8bcbe84808e59724868660cc600061096b8a61102b565b6001600160a01b03168152602080820192909252604090810160009081208b8252909252812080549161099d83612d24565b9091555087516040805160208101969096526001600160a01b03909416938501939093526060840191909152608083015260a082015260c00160405160208183030381529060405280519060200120604051602001610a1392919061190160f01b81526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600060018285602001518660400151876060015160405160008152602001604052604051610a75949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610a97573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610ad55750806001600160a01b0316610aca8661102b565b6001600160a01b0316145b610b215760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964205369676e617475726521206865792121000000000000000060448201526064016106a9565b610b2b8686611a7f565b505050505050565b33610b3c611352565b6001600160a01b031614610b625760405162461bcd60e51b81526004016106a990612d3f565b600083815260cb602090815260409091208351610b819285019061251c565b50600083815260cb602090815260409091208251610ba79260019092019184019061251c565b50505050565b610bb73382611bbb565b610bd35760405162461bcd60e51b81526004016106a990612d74565b6107df838383611ca5565b60008080610bea611352565b6001600160a01b03161415610c0c57610c01611352565b600091509150610c4e565b610c14611352565b600085815260cb602052604090206003015461271090610c3f90600160a01b900461ffff1686612dc5565b610c499190612de4565b915091505b9250929050565b80511580610c635750805142105b610ca55760405162461bcd60e51b81526020600482015260136024820152721b5a5b9d15da5d1a14da59c8195e1c1a5c9959606a1b60448201526064016106a9565b6000610caf611aed565b6001600160a01b038616600090815260cd602052604081208054929350909183917fd4d28b9b4e3ac4e47c619c8d769ef53b84fb230b16466cf9dacfefec9772654b91879185610cfe83612d24565b90915550865160408051602081019590955261ffff909316928401929092526060830152608082015260a00160405160208183030381529060405280519060200120604051602001610d6792919061190160f01b81526002810192909252602282015260420190565b604051602081830303815290604052805190602001209050600060018285602001518660400151876060015160405160008152602001604052604051610dc9949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610deb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610e215750806001600160a01b0316876001600160a01b0316145b610e6d5760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964205369676e617475726521207779642121210000000000000060448201526064016106a9565b50505050505050505050565b6107df838383604051806020016040528060008152506114d6565b33610e9d611352565b6001600160a01b031614610ec35760405162461bcd60e51b81526004016106a990612d3f565b610ecc81611a62565b610ed557600080fd5b610ede81611e45565b50565b60ca6020526000908152604090208054610efa90612cd3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2690612cd3565b8015610f735780601f10610f4857610100808354040283529160200191610f73565b820191906000526020600020905b815481529060010190602001808311610f5657829003601f168201915b505050505081565b33610f84611352565b6001600160a01b031614610faa5760405162461bcd60e51b81526004016106a990612d3f565b60c98190556040518181527fa2bc4a36b1e221bdcc16df9d7c15559a5f4f9902519c0f92ad3198f1df005e8b9060200160405180910390a150565b6000610ff082611a62565b61100c5760405162461bcd60e51b81526004016106a990612e06565b50600090815260cb60205260409020600201546001600160a01b031690565b6000818152606760205260408120546001600160a01b0316806105a95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106a9565b606080600060cb60008581526020019081526020016000206040518060a00160405290816000820180546110d590612cd3565b80601f016020809104026020016040519081016040528092919081815260200182805461110190612cd3565b801561114e5780601f106111235761010080835404028352916020019161114e565b820191906000526020600020905b81548152906001019060200180831161113157829003601f168201915b5050505050815260200160018201805461116790612cd3565b80601f016020809104026020016040519081016040528092919081815260200182805461119390612cd3565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b505050918352505060028201546001600160a01b039081166020808401919091526003909301549081166040830152600160a01b900461ffff166060909101528151910151909590945092505050565b33611239611352565b6001600160a01b03161461125f5760405162461bcd60e51b81526004016106a990612d3f565b600091825260cb602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b0382166112fb5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106a9565b506001600160a01b031660009081526068602052604090205490565b33611320611352565b6001600160a01b0316146113465760405162461bcd60e51b81526004016106a990612d3f565b6113506000611ee0565b565b60006113666097546001600160a01b031690565b905090565b600054610100900460ff1680611384575060005460ff16155b6113a05760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff161580156113c2576000805461ffff19166101011790555b6113cc8383611f32565b6113d4611fb9565b6113dd8461192f565b6113eb60ce80546001019055565b8015610ba7576000805461ff001916905550505050565b6060606680546105be90612cd3565b6001600160a01b03821633141561146a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106a9565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6114e03383611bbb565b6114fc5760405162461bcd60e51b81526004016106a990612d74565b610ba784848484612034565b606061151382611a62565b61152f5760405162461bcd60e51b81526004016106a990612e06565b600082815260cb60205260409020805461080490612cd3565b6127108161ffff161061159d5760405162461bcd60e51b815260206004820152601c60248201527f726f79616c747920746f6f2068696768212063616c6d20646f776e210000000060448201526064016106a9565b60006115a860ce5490565b90506115b48782612067565b6040805160a08101825287815260208082018890526001600160a01b03808816838501528616606083015261ffff85166080830152600084815260cb825292909220815180519293919261160b928492019061251c565b506020828101518051611624926001850192019061251c565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b0319909416928216929092179290921790558416816116893390565b6001600160a01b03167fe2c569ed71e28d19c0a19f2527b47c361721165c00055e89f3d82b55b59831ca89896040516116c39291906129b6565b60405180910390a46116d960ce80546001019055565b50505050505050565b60408051606087901b6bffffffffffffffffffffffff191660208083019190915282516014818403018152603490920190925280519101206117579083838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061208592505050565b6117935760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b210383937b7b360991b60448201526064016106a9565b6127108361ffff16106117e85760405162461bcd60e51b815260206004820152601c60248201527f726f79616c747920746f6f2068696768212063616c6d20646f776e210000000060448201526064016106a9565b60006117f360ce5490565b90506117ff8982612067565b6040805160a08101825289815260208082018a90526001600160a01b03808a16838501528816606083015261ffff87166080830152600084815260cb8252929092208151805192939192611856928492019061251c565b50602082810151805161186f926001850192019061251c565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b0319909416928216929092179290921790558616816118d43390565b6001600160a01b03167fe2c569ed71e28d19c0a19f2527b47c361721165c00055e89f3d82b55b59831ca8b8b60405161190e9291906129b6565b60405180910390a461192460ce80546001019055565b505050505050505050565b33611938611352565b6001600160a01b03161461195e5760405162461bcd60e51b81526004016106a990612d3f565b6001600160a01b0381166119c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106a9565b610ede81611ee0565b60006119d782611a62565b6119f35760405162461bcd60e51b81526004016106a990612e06565b50600090815260cb60205260409020600301546001600160a01b031690565b60006001600160e01b031982166380ac58cd60e01b1480611a4357506001600160e01b03198216635b5e139f60e01b145b806105a957506301ffc9a760e01b6001600160e01b03198316146105a9565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611ab48261102b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6040805180820182526007815266436174616c6f6760c81b6020918201528151808301835260018152603160f81b9082015281517f6e9418f1dc20e379635b80ae8c9349271c00ea6c1496ad038731c99675489b76818301527f8f0622725b119d5873cf2bf856aa64635dc2f13ccd3382c9f04efc04e5d12d32818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012090565b6000611bc682611a62565b611c275760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106a9565b6000611c328361102b565b9050806001600160a01b0316846001600160a01b03161480611c6d5750836001600160a01b0316611c6284610641565b6001600160a01b0316145b80611c9d57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611cb88261102b565b6001600160a01b031614611d205760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106a9565b6001600160a01b038216611d825760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106a9565b611d8d600082611a7f565b6001600160a01b0383166000908152606860205260408120805460019290611db6908490612ea3565b90915550506001600160a01b0382166000908152606860205260408120805460019290611de4908490612eba565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611e508261102b565b9050611e5d600083611a7f565b6001600160a01b0381166000908152606860205260408120805460019290611e86908490612ea3565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680611f4b575060005460ff16155b611f675760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff16158015611f89576000805461ffff19166101011790555b611f9161209b565b611f9961209b565b611fa38383612105565b80156107df576000805461ff0019169055505050565b600054610100900460ff1680611fd2575060005460ff16155b611fee5760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff16158015612010576000805461ffff19166101011790555b61201861209b565b61202061219a565b8015610ede576000805461ff001916905550565b61203f848484611ca5565b61204b848484846121fa565b610ba75760405162461bcd60e51b81526004016106a990612ed2565b612081828260405180602001604052806000815250612307565b5050565b60006120948260c9548561233a565b9392505050565b600054610100900460ff16806120b4575060005460ff16155b6120d05760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff16158015612020576000805461ffff19166101011790558015610ede576000805461ff001916905550565b600054610100900460ff168061211e575060005460ff16155b61213a5760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff1615801561215c576000805461ffff19166101011790555b825161216f90606590602086019061251c565b50815161218390606690602085019061251c565b5080156107df576000805461ff0019169055505050565b600054610100900460ff16806121b3575060005460ff16155b6121cf5760405162461bcd60e51b81526004016106a990612e55565b600054610100900460ff161580156121f1576000805461ffff19166101011790555b61202033611ee0565b60006001600160a01b0384163b156122fc57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061223e903390899088908890600401612f24565b602060405180830381600087803b15801561225857600080fd5b505af1925050508015612288575060408051601f3d908101601f1916820190925261228591810190612f61565b60015b6122e2573d8080156122b6576040519150601f19603f3d011682016040523d82523d6000602084013e6122bb565b606091505b5080516122da5760405162461bcd60e51b81526004016106a990612ed2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611c9d565b506001949350505050565b61231183836123e9565b61231e60008484846121fa565b6107df5760405162461bcd60e51b81526004016106a990612ed2565b600081815b85518110156123de57600086828151811061235c5761235c612f7e565b6020026020010151905080831161239e5760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506123cb565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806123d681612d24565b91505061233f565b509092149392505050565b6001600160a01b03821661243f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106a9565b61244881611a62565b156124955760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106a9565b6001600160a01b03821660009081526068602052604081208054600192906124be908490612eba565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461252890612cd3565b90600052602060002090601f01602090048101928261254a5760008555612590565b82601f1061256357805160ff1916838001178555612590565b82800160010185558215612590579182015b82811115612590578251825591602001919060010190612575565b5061259c9291506125a0565b5090565b5b8082111561259c57600081556001016125a1565b6001600160e01b031981168114610ede57600080fd5b6000602082840312156125dd57600080fd5b8135612094816125b5565b6000815180845260005b8181101561260e576020818501810151868301820152016125f2565b81811115612620576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061209460208301846125e8565b60006020828403121561265a57600080fd5b5035919050565b80356001600160a01b038116811461267857600080fd5b919050565b6000806040838503121561269057600080fd5b61269983612661565b946020939093013593505050565b6000602082840312156126b957600080fd5b61209482612661565b634e487b7160e01b600052604160045260246000fd5b6000608082840312156126ea57600080fd5b6040516080810181811067ffffffffffffffff8211171561270d5761270d6126c2565b60405282358152905080602083013560ff8116811461272b57600080fd5b8060208301525060408301356040820152606083013560608201525092915050565b600080600060c0848603121561276257600080fd5b61276b84612661565b92506020840135915061278185604086016126d8565b90509250925092565b600067ffffffffffffffff808411156127a5576127a56126c2565b604051601f8501601f19908116603f011681019082821181831017156127cd576127cd6126c2565b816040528093508581528686860111156127e657600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261281157600080fd5b6120948383356020850161278a565b60008060006060848603121561283557600080fd5b83359250602084013567ffffffffffffffff8082111561285457600080fd5b61286087838801612800565b9350604086013591508082111561287657600080fd5b5061288386828701612800565b9150509250925092565b6000806000606084860312156128a257600080fd5b6128ab84612661565b92506128b960208501612661565b9150604084013590509250925092565b600080604083850312156128dc57600080fd5b50508035926020909101359150565b803561ffff8116811461267857600080fd5b6000806000806000806000610140888a03121561291957600080fd5b61292288612661565b9650602088013567ffffffffffffffff8082111561293f57600080fd5b61294b8b838c01612800565b975060408a013591508082111561296157600080fd5b5061296e8a828b01612800565b95505061297d60608901612661565b935061298b60808901612661565b925061299960a089016128eb565b91506129a88960c08a016126d8565b905092959891949750929550565b6040815260006129c960408301856125e8565b82810360208401526129db81856125e8565b95945050505050565b600080604083850312156129f757600080fd5b82359150612a0760208401612661565b90509250929050565b600080600060608486031215612a2557600080fd5b612a2e84612661565b9250602084013567ffffffffffffffff8082111561285457600080fd5b60008060408385031215612a5e57600080fd5b612a6783612661565b915060208301358015158114612a7c57600080fd5b809150509250929050565b60008060008060808587031215612a9d57600080fd5b612aa685612661565b9350612ab460208601612661565b925060408501359150606085013567ffffffffffffffff811115612ad757600080fd5b8501601f81018713612ae857600080fd5b612af78782356020840161278a565b91505092959194509250565b60008060008060008060c08789031215612b1c57600080fd5b612b2587612661565b9550602087013567ffffffffffffffff80821115612b4257600080fd5b612b4e8a838b01612800565b96506040890135915080821115612b6457600080fd5b50612b7189828a01612800565b945050612b8060608801612661565b9250612b8e60808801612661565b9150612b9c60a088016128eb565b90509295509295509295565b60008060008060008060008060e0898b031215612bc457600080fd5b612bcd89612661565b9750602089013567ffffffffffffffff80821115612bea57600080fd5b612bf68c838d01612800565b985060408b0135915080821115612c0c57600080fd5b612c188c838d01612800565b9750612c2660608c01612661565b9650612c3460808c01612661565b9550612c4260a08c016128eb565b945060c08b0135915080821115612c5857600080fd5b818b0191508b601f830112612c6c57600080fd5b813581811115612c7b57600080fd5b8c60208260051b8501011115612c9057600080fd5b6020830194508093505050509295985092959890939650565b60008060408385031215612cbc57600080fd5b612cc583612661565b9150612a0760208401612661565b600181811c90821680612ce757607f821691505b60208210811415612d0857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d3857612d38612d0e565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000816000190483118215151615612ddf57612ddf612d0e565b500290565b600082612e0157634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082821015612eb557612eb5612d0e565b500390565b60008219821115612ecd57612ecd612d0e565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612f57908301846125e8565b9695505050505050565b600060208284031215612f7357600080fd5b8151612094816125b5565b634e487b7160e01b600052603260045260246000fdfea26469706673582212206414d295929d9b3e4d751d6bf304ba56494f6837558e31f857d51d4a25c5626964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Mint(address,uint256,address,string,string)": {
        "notice": "Events"
      },
      "merkleRootUpdated(bytes32)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "PERMIT_TYPEHASH()": {
        "notice": "typehashes"
      },
      "burn(uint256)": {
        "notice": "Basic burn function"
      },
      "constructor": {
        "notice": "ooz upgradeable constructor thingy"
      },
      "creator(uint256)": {
        "notice": "returns creator address of token id"
      },
      "getURIs(uint256)": {
        "notice": "get token URIs"
      },
      "merkleRoot()": {
        "notice": "State variable containing merkle root  see {IAngelaList}"
      },
      "mint(address,string,string,address,address,uint16)": {
        "notice": "MINT FUNCTION params should be calldata in  implementation w/ accesscontrol etc. etc. this just test"
      },
      "mintWhitelist(address,string,string,address,address,uint16,bytes32[])": {
        "notice": "Test function to attempt merkle proof whitelisting"
      },
      "mintWithSig(address,string,string,address,address,uint16,(uint256,uint8,bytes32,bytes32))": {
        "notice": "mint with sig (EIP712)"
      },
      "owner()": {
        "notice": "Basic override for owner interface"
      },
      "permit(address,uint256,(uint256,uint8,bytes32,bytes32))": {
        "notice": "permit modified for ERC-721, based on EIP2612 (zora)"
      },
      "permitNonces(address,uint256)": {
        "notice": "EIP712 shit"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "royalty function, EIP-2981"
      },
      "royaltyPayoutAddress(uint256)": {
        "notice": "returns royalty payout address for token id"
      },
      "supportsInterface(bytes4)": {
        "notice": "supports interface"
      },
      "tokenContentURI(uint256)": {
        "notice": "token content URI"
      },
      "tokenMetadataURIs(uint256)": {
        "notice": "Mappings"
      },
      "updateMerkleRoot(bytes32)": {
        "notice": "update merkle root"
      },
      "updateRoyaltyInfo(uint256,address)": {
        "notice": "update royalty info "
      },
      "updateTokenURIs(uint256,string,string)": {
        "notice": "update tokenURIs "
      }
    },
    "notice": "TODO: use ext calls for updating content to reduce opsize  add merkle proof, access control",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 152,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 155,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1487,
        "contract": "contracts/CTest.sol:CTest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1881,
        "contract": "contracts/CTest.sol:CTest",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 221,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 223,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 227,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 231,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 235,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 241,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1037,
        "contract": "contracts/CTest.sol:CTest",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/CTest.sol:CTest",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1910,
        "contract": "contracts/CTest.sol:CTest",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "201",
        "type": "t_bytes32"
      },
      {
        "astId": 2018,
        "contract": "contracts/CTest.sol:CTest",
        "label": "tokenMetadataURIs",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2024,
        "contract": "contracts/CTest.sol:CTest",
        "label": "tokenData",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_struct(TokenData)2739_storage)"
      },
      {
        "astId": 2031,
        "contract": "contracts/CTest.sol:CTest",
        "label": "permitNonces",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2035,
        "contract": "contracts/CTest.sol:CTest",
        "label": "mintWithSigNonces",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2049,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "206",
        "type": "t_struct(Counter)1494_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenData)2739_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICTest.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)2739_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1494_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1493,
            "contract": "contracts/CTest.sol:CTest",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)2739_storage": {
        "encoding": "inplace",
        "label": "struct ICTest.TokenData",
        "members": [
          {
            "astId": 2730,
            "contract": "contracts/CTest.sol:CTest",
            "label": "metadataURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2732,
            "contract": "contracts/CTest.sol:CTest",
            "label": "contentURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2734,
            "contract": "contracts/CTest.sol:CTest",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2736,
            "contract": "contracts/CTest.sol:CTest",
            "label": "royaltyPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2738,
            "contract": "contracts/CTest.sol:CTest",
            "label": "royaltyBPS",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}