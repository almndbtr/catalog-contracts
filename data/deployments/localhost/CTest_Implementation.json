{
  "address": "0xf9ec65A1CDf2114197dEc864EA6D89292fbF87Be",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contentURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyPayoutAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_royaltyBPS",
          "type": "uint16"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenContentURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenMetadataURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_royaltyPayoutAddress",
          "type": "address"
        }
      ],
      "name": "updateRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contentURI",
          "type": "string"
        }
      ],
      "name": "updateTokenURIs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3f4ae148bc5d466940ec3947bfc564a80e14b6f787051d2bd306ba768c97aaa",
  "receipt": {
    "to": null,
    "from": "0x17ff474427dd67E58d3FB785F00200AD8883c31E",
    "contractAddress": "0xf9ec65A1CDf2114197dEc864EA6D89292fbF87Be",
    "transactionIndex": 0,
    "gasUsed": "1976944",
    "logsBloom": "0x
    "blockHash": "0x9b0a7d93604ea4cb92bd2072cb6da3f8f7e3ec5c79dcb458e810f38a0027bfb7",
    "transactionHash": "0xe3f4ae148bc5d466940ec3947bfc564a80e14b6f787051d2bd306ba768c97aaa",
    "logs": [],
    "blockNumber": 13674617,
    "cumulativeGasUsed": "1976944",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d8e3084b9a75b474ef80ed8dc63409a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyPayoutAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyBPS\",\"type\":\"uint16\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenContentURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMetadataURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyPayoutAddress\",\"type\":\"address\"}],\"name\":\"updateRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentURI\",\"type\":\"string\"}],\"name\":\"updateTokenURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Mint(address,uint256,address,string,string)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Basic burn function\"},\"constructor\":{\"notice\":\"ooz upgradeable constructor thingy\"},\"creator(uint256)\":{\"notice\":\"returns creator address of token id\"},\"getURIs(uint256)\":{\"notice\":\"get token URIs\"},\"mint(address,string,string,address,address,uint16)\":{\"notice\":\"MINT FUNCTION params should be calldata in  implementation w/ accesscontrol etc. etc. this just test\"},\"owner()\":{\"notice\":\"Basic override for owner interface\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"royalty function, EIP-2981\"},\"supportsInterface(bytes4)\":{\"notice\":\"supports interface\"},\"tokenContentURI(uint256)\":{\"notice\":\"token content URI\"},\"tokenMetadataURIs(uint256)\":{\"notice\":\"Mappings\"},\"updateRoyaltyInfo(uint256,address)\":{\"notice\":\"update royalty info \"},\"updateTokenURIs(uint256,string,string)\":{\"notice\":\"update tokenURIs \"}},\"notice\":\"TODO: use ext calls for updating content to reduce opsize \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CTest.sol\":\"CTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x70994ca77f6dce93193d744ed99add51b57aef3e56d42b90889f6a2b1444b6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa22a7520aa91e00d994a8fc0c6e17df8331c3224d87a9079ae8b1a97644cbbbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/CTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport {ICTest} from \\\"./interfaces/ICTest.sol\\\";\\n\\n/**\\n--------------------------------------------------------------------------------------------------------------------\\n                                                                                        \\n  _____   _______     _____  ______   _______   \\n /\\\\ __/\\\\/\\\\_______)\\\\ /\\\\_____\\\\/ ____/\\\\/\\\\_______)\\\\ \\n ) )__\\\\/\\\\(___  __\\\\/( (_____/) ) __\\\\/\\\\(___  __\\\\/ \\n/ / /     / / /     \\\\ \\\\__\\\\   \\\\ \\\\ \\\\    / / /     \\n\\\\ \\\\ \\\\_   ( ( (      / /__/_  _\\\\ \\\\ \\\\  ( ( (      \\n ) )__/\\\\  \\\\ \\\\ \\\\    ( (_____\\\\)____) )  \\\\ \\\\ \\\\     \\n \\\\/___\\\\/  /_/_/     \\\\/_____/\\\\____\\\\/   /_/_/     \\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            \\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\nTESTNET V0\\n\\\"CTest\\\"                     :   WIP starting ground for cNFT's\\n@author                     :   @bretth18 (computerdata) \\n@title                      :   CTest\\n@dev                        :   n/a\\n */\\n\\n/// TODO:\\n/// use ext calls for updating content to reduce opsize \\n\\ncontract CTest is\\n    ICTest,\\n    ERC721Upgradeable,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n\\n\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    /// Events\\n    event Mint(address indexed, uint256 indexed, address indexed, string, string);\\n\\n    /// Mappings\\n    mapping(uint256 => string) public tokenMetadataURIs;\\n    /// TODO: add a bunch of mapping types\\n\\n    /// mappy the token data to the token id yeah oh yeah\\n    mapping(uint256 => TokenData) private tokenData;\\n\\n\\n    /// typehashes\\n    // bytes32 public constant PERMIT_TYPEHASH = keccack256 blah blah blah;\\n\\n    // Tracking token Id\\n    CountersUpgradeable.Counter private _tokenIdCounter;\\n\\n\\n    /// ooz upgradeable constructor thingy\\n    constructor() initializer{}\\n\\n\\n    function initialize(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol\\n\\n    ) public initializer {\\n\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        // Set ownership to the og sender\\n        transferOwnership(_owner);\\n\\n\\n        // Set tokenId to start @ 1\\n        _tokenIdCounter.increment();\\n    }\\n\\n\\n\\n    /// Basic override for owner interface\\n    function owner() public view override(OwnableUpgradeable) returns (address) {\\n        return super.owner();\\n    }\\n\\n    /// Basic burn function\\n    function burn(uint256 _tokenId) public {\\n        require(_exists(_tokenId));\\n        require(_isApprovedOrOwner(_msgSender(), _tokenId), \\\"Not Approved!\\\");\\n        _burn(_tokenId);\\n    }\\n\\n\\n    /// get token URIs\\n    function getURIs(uint256 _tokenId) public view returns (string memory, string memory) {\\n\\n        TokenData memory data = tokenData[_tokenId];\\n        \\n        return (data.metadataURI, data.contentURI);\\n    }\\n\\n\\n    /// token content URI\\n    function tokenContentURI(uint256 _tokenId) public view returns (string memory) {\\n        return tokenData[_tokenId].contentURI;\\n    }\\n    \\n    /// returns creator address of token id\\n    function creator(uint256 _tokenId) public view  returns (address) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        return tokenData[_tokenId].creator;\\n    }\\n\\n\\n    /// MINT FUNCTION\\n    /// params should be calldata in  implementation w/ accesscontrol etc. etc. this just test\\n    function mint(\\n        address to,\\n        string memory _metadataURI,\\n        string memory _contentURI,\\n        address _creator,\\n        address _royaltyPayoutAddress,\\n        uint16 _royaltyBPS\\n    ) public {\\n\\n        require(_royaltyBPS < 10000, \\\"royalty too high! calm down!\\\");\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _safeMint(to, tokenId);\\n\\n        tokenData[tokenId] = TokenData({\\n            metadataURI: _metadataURI,\\n            contentURI: _contentURI,\\n            creator: _creator,\\n            royaltyPayout: _royaltyPayoutAddress,\\n            royaltyBPS: _royaltyBPS\\n        });\\n\\n        // event time \\n        emit Mint(_msgSender(), tokenId,  _creator, _metadataURI, _contentURI);\\n\\n        /// todo: set royalty type function here\\n\\n        /// increase tokenid\\n        _tokenIdCounter.increment();\\n        \\n\\n    }\\n\\n    /// update tokenURIs \\n    function updateTokenURIs(\\n        uint256 _tokenId,\\n        string memory _metadataURI,\\n        string memory _contentURI\\n    ) public onlyOwner {\\n\\n        tokenData[_tokenId].metadataURI = _metadataURI;\\n        tokenData[_tokenId].contentURI = _contentURI;\\n    \\n    \\n        // event heree!\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        return tokenData[_tokenId].metadataURI;\\n    }\\n\\n    /// update royalty info \\n    function updateRoyaltyInfo(uint256 _tokenId, address _royaltyPayoutAddress) public onlyOwner {\\n        /// TODO make ext call to royalty contract to handle changes\\n        tokenData[_tokenId].royaltyPayout = _royaltyPayoutAddress;\\n\\n        // this should broadcast an event!\\n    }\\n\\n    /// royalty function, EIP-2981\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) \\n        external \\n        view \\n        override \\n        returns (address receiver, uint256 royaltyAmount) {\\n\\n        /// Don't give royalties to a bottomless pit lol. \\n        if(owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n\\n        return (owner(), (_salePrice * tokenData[_tokenId].royaltyBPS) / 10_000);\\n    }\\n    \\n\\n    /// supports interface\\n    function supportsInterface(bytes4 interfaceId)\\n        public \\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool) {\\n        \\n        return \\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    \\n    }\\n\\n}\\n\\n\\n\",\"keccak256\":\"0x2b8bf2ebf224e91bec230e412bb5cd09932cd457a748e1a84b29a8f06ae1860b\",\"license\":\"MIT\"},\"contracts/interfaces/ICTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n\\n/// base interface for Catalog cNFT TEST\\ninterface ICTest {\\n\\n    /// EIP712 sig\\n    struct EIP712Signature {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /// token data (metadata and content)\\n    struct TokenData {\\n        string metadataURI;\\n        string contentURI;\\n        address creator;\\n        address royaltyPayout;\\n        uint16 royaltyBPS;\\n    }\\n\\n\\n    // function mint(TokenData calldata data) external; /// market shit needs to go here\\n\\n\\n    // /// EIP712 sig\\n    // function mintWithSig(TokenData calldata data, EIP712Signature calldata sig) external;\\n\\n\\n    // /// update token content URI (access controlled)\\n    // function updateTokenContentURI(uint256 tokenId, string calldata contentURI) external;\\n\\n    // /// update token metadata URI (access controlled)\\n    // function updateTokenMetadataURI(uint256 tokenId, string calldata metadataURI) external;\\n\\n\\n    // /// revoke token approval\\n    // function revokeApproval(uint256 tokenId) external;\\n\\n\\n    // /// EIP712 permit, sts an approved spender given valid sig\\n    // function permit(address spender, uint256 tokenId, EIP712Signature calldata sig) external;\\n\\n    // Burn token\\n    function burn(uint256 tokenId) external;\\n}\",\"keccak256\":\"0xd6ca275108165428c961b761276d47c4546f5b3ecc629f4067b96cbf54442007\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600054610100900460ff168061002a575060005460ff16155b6100915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156100b3576000805461ffff19166101011790555b80156100c5576000805461ff00191690555b50612257806100d56000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806364e9293e116100de57806395d89b4111610097578063c87b56dd11610071578063c87b56dd14610380578063ce3d22e414610393578063e985e9c5146103a6578063f2fde38b146103e257600080fd5b806395d89b4114610352578063a22cb4651461035a578063b88d4fde1461036d57600080fd5b806364e9293e146102da578063669d311c146102fb57806370a082311461030e578063715018a61461032f5780638da5cb5b14610337578063906571471461033f57600080fd5b806323b872dd1161014b57806342966c681161012557806342966c681461028e57806344dcc232146102a1578063510b5158146102b45780636352211e146102c757600080fd5b806323b872dd146102365780632a55205a1461024957806342842e0e1461027b57600080fd5b806301ffc9a71461019357806306fdde03146101bb578063081812fc146101d0578063095ea7b3146101fb5780630c0a9d26146102105780631cbbc6e214610223575b600080fd5b6101a66101a1366004611af5565b6103f5565b60405190151581526020015b60405180910390f35b6101c3610420565b6040516101b29190611b66565b6101e36101de366004611b79565b6104b2565b6040516001600160a01b0390911681526020016101b2565b61020e610209366004611bae565b61053f565b005b6101c361021e366004611b79565b610655565b61020e610231366004611c84565b6106fa565b61020e610244366004611cf1565b610774565b61025c610257366004611d2d565b6107a6565b604080516001600160a01b0390931683526020830191909152016101b2565b61020e610289366004611cf1565b61081d565b61020e61029c366004611b79565b610838565b6101c36102af366004611b79565b61089b565b6101e36102c2366004611b79565b610935565b6101e36102d5366004611b79565b61097b565b6102ed6102e8366004611b79565b6109f2565b6040516101b2929190611d4f565b61020e610309366004611d7d565b610b80565b61032161031c366004611da9565b610be0565b6040519081526020016101b2565b61020e610c67565b6101e3610ca2565b61020e61034d366004611dc4565b610cbb565b6101c3610d52565b61020e610368366004611dff565b610d61565b61020e61037b366004611e3b565b610e26565b6101c361038e366004611b79565b610e58565b61020e6103a1366004611eb7565b610e98565b6101a66103b4366004611f67565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61020e6103f0366004611da9565b611032565b600063152a902d60e11b6001600160e01b03198316148061041a575061041a826110cf565b92915050565b60606065805461042f90611f91565b80601f016020809104026020016040519081016040528092919081815260200182805461045b90611f91565b80156104a85780601f1061047d576101008083540402835291602001916104a8565b820191906000526020600020905b81548152906001019060200180831161048b57829003601f168201915b5050505050905090565b60006104bd8261111f565b6105235760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b600061054a8261097b565b9050806001600160a01b0316836001600160a01b031614156105b85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161051a565b336001600160a01b03821614806105d457506105d481336103b4565b6106465760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161051a565b610650838361113c565b505050565b600081815260ca6020526040902060010180546060919061067590611f91565b80601f01602080910402602001604051908101604052809291908181526020018280546106a190611f91565b80156106ee5780601f106106c3576101008083540402835291602001916106ee565b820191906000526020600020905b8154815290600101906020018083116106d157829003601f168201915b50505050509050919050565b33610703610ca2565b6001600160a01b0316146107295760405162461bcd60e51b815260040161051a90611fcc565b600083815260ca60209081526040909120835161074892850190611a46565b50600083815260ca60209081526040909120825161076e92600190920191840190611a46565b50505050565b61077f335b826111aa565b61079b5760405162461bcd60e51b815260040161051a90612001565b610650838383611294565b600080806107b2610ca2565b6001600160a01b031614156107d4576107c9610ca2565b600091509150610816565b6107dc610ca2565b600085815260ca60205260409020600301546127109061080790600160a01b900461ffff1686612068565b6108119190612087565b915091505b9250929050565b61065083838360405180602001604052806000815250610e26565b6108418161111f565b61084a57600080fd5b61085333610779565b61088f5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420417070726f7665642160981b604482015260640161051a565b61089881611434565b50565b60c960205260009081526040902080546108b490611f91565b80601f01602080910402602001604051908101604052809291908181526020018280546108e090611f91565b801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b505050505081565b60006109408261111f565b61095c5760405162461bcd60e51b815260040161051a906120a9565b50600090815260ca60205260409020600201546001600160a01b031690565b6000818152606760205260408120546001600160a01b03168061041a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161051a565b606080600060ca60008581526020019081526020016000206040518060a0016040529081600082018054610a2590611f91565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5190611f91565b8015610a9e5780601f10610a7357610100808354040283529160200191610a9e565b820191906000526020600020905b815481529060010190602001808311610a8157829003601f168201915b50505050508152602001600182018054610ab790611f91565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae390611f91565b8015610b305780601f10610b0557610100808354040283529160200191610b30565b820191906000526020600020905b815481529060010190602001808311610b1357829003601f168201915b505050918352505060028201546001600160a01b039081166020808401919091526003909301549081166040830152600160a01b900461ffff166060909101528151910151909590945092505050565b33610b89610ca2565b6001600160a01b031614610baf5760405162461bcd60e51b815260040161051a90611fcc565b600091825260ca602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b038216610c4b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161051a565b506001600160a01b031660009081526068602052604090205490565b33610c70610ca2565b6001600160a01b031614610c965760405162461bcd60e51b815260040161051a90611fcc565b610ca060006114cf565b565b6000610cb66097546001600160a01b031690565b905090565b600054610100900460ff1680610cd4575060005460ff16155b610cf05760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff16158015610d12576000805461ffff19166101011790555b610d1c8383611521565b610d246115a8565b610d2d84611032565b610d3b60cb80546001019055565b801561076e576000805461ff001916905550505050565b60606066805461042f90611f91565b6001600160a01b038216331415610dba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161051a565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610e3033836111aa565b610e4c5760405162461bcd60e51b815260040161051a90612001565b61076e84848484611623565b6060610e638261111f565b610e7f5760405162461bcd60e51b815260040161051a906120a9565b600082815260ca60205260409020805461067590611f91565b6127108161ffff1610610eed5760405162461bcd60e51b815260206004820152601c60248201527f726f79616c747920746f6f2068696768212063616c6d20646f776e2100000000604482015260640161051a565b6000610ef860cb5490565b9050610f048782611656565b6040805160a08101825287815260208082018890526001600160a01b03808816838501528616606083015261ffff85166080830152600084815260ca8252929092208151805192939192610f5b9284920190611a46565b506020828101518051610f749260018501920190611a46565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b031990941692821692909217929092179055841681610fd93390565b6001600160a01b03167fe2c569ed71e28d19c0a19f2527b47c361721165c00055e89f3d82b55b59831ca8989604051611013929190611d4f565b60405180910390a461102960cb80546001019055565b50505050505050565b3361103b610ca2565b6001600160a01b0316146110615760405162461bcd60e51b815260040161051a90611fcc565b6001600160a01b0381166110c65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161051a565b610898816114cf565b60006001600160e01b031982166380ac58cd60e01b148061110057506001600160e01b03198216635b5e139f60e01b145b8061041a57506301ffc9a760e01b6001600160e01b031983161461041a565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906111718261097b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006111b58261111f565b6112165760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161051a565b60006112218361097b565b9050806001600160a01b0316846001600160a01b0316148061125c5750836001600160a01b0316611251846104b2565b6001600160a01b0316145b8061128c57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166112a78261097b565b6001600160a01b03161461130f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161051a565b6001600160a01b0382166113715760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161051a565b61137c60008261113c565b6001600160a01b03831660009081526068602052604081208054600192906113a5908490612146565b90915550506001600160a01b03821660009081526068602052604081208054600192906113d390849061215d565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061143f8261097b565b905061144c60008361113c565b6001600160a01b0381166000908152606860205260408120805460019290611475908490612146565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff168061153a575060005460ff16155b6115565760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff16158015611578576000805461ffff19166101011790555b611580611674565b611588611674565b61159283836116de565b8015610650576000805461ff0019169055505050565b600054610100900460ff16806115c1575060005460ff16155b6115dd5760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff161580156115ff576000805461ffff19166101011790555b611607611674565b61160f611773565b8015610898576000805461ff001916905550565b61162e848484611294565b61163a848484846117d3565b61076e5760405162461bcd60e51b815260040161051a90612175565b6116708282604051806020016040528060008152506118e0565b5050565b600054610100900460ff168061168d575060005460ff16155b6116a95760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff1615801561160f576000805461ffff19166101011790558015610898576000805461ff001916905550565b600054610100900460ff16806116f7575060005460ff16155b6117135760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff16158015611735576000805461ffff19166101011790555b8251611748906065906020860190611a46565b50815161175c906066906020850190611a46565b508015610650576000805461ff0019169055505050565b600054610100900460ff168061178c575060005460ff16155b6117a85760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff161580156117ca576000805461ffff19166101011790555b61160f336114cf565b60006001600160a01b0384163b156118d557604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906118179033908990889088906004016121c7565b602060405180830381600087803b15801561183157600080fd5b505af1925050508015611861575060408051601f3d908101601f1916820190925261185e91810190612204565b60015b6118bb573d80801561188f576040519150601f19603f3d011682016040523d82523d6000602084013e611894565b606091505b5080516118b35760405162461bcd60e51b815260040161051a90612175565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061128c565b506001949350505050565b6118ea8383611913565b6118f760008484846117d3565b6106505760405162461bcd60e51b815260040161051a90612175565b6001600160a01b0382166119695760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161051a565b6119728161111f565b156119bf5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161051a565b6001600160a01b03821660009081526068602052604081208054600192906119e890849061215d565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611a5290611f91565b90600052602060002090601f016020900481019282611a745760008555611aba565b82601f10611a8d57805160ff1916838001178555611aba565b82800160010185558215611aba579182015b82811115611aba578251825591602001919060010190611a9f565b50611ac6929150611aca565b5090565b5b80821115611ac65760008155600101611acb565b6001600160e01b03198116811461089857600080fd5b600060208284031215611b0757600080fd5b8135611b1281611adf565b9392505050565b6000815180845260005b81811015611b3f57602081850181015186830182015201611b23565b81811115611b51576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611b126020830184611b19565b600060208284031215611b8b57600080fd5b5035919050565b80356001600160a01b0381168114611ba957600080fd5b919050565b60008060408385031215611bc157600080fd5b611bca83611b92565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611c0957611c09611bd8565b604051601f8501601f19908116603f01168101908282118183101715611c3157611c31611bd8565b81604052809350858152868686011115611c4a57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611c7557600080fd5b611b1283833560208501611bee565b600080600060608486031215611c9957600080fd5b83359250602084013567ffffffffffffffff80821115611cb857600080fd5b611cc487838801611c64565b93506040860135915080821115611cda57600080fd5b50611ce786828701611c64565b9150509250925092565b600080600060608486031215611d0657600080fd5b611d0f84611b92565b9250611d1d60208501611b92565b9150604084013590509250925092565b60008060408385031215611d4057600080fd5b50508035926020909101359150565b604081526000611d626040830185611b19565b8281036020840152611d748185611b19565b95945050505050565b60008060408385031215611d9057600080fd5b82359150611da060208401611b92565b90509250929050565b600060208284031215611dbb57600080fd5b611b1282611b92565b600080600060608486031215611dd957600080fd5b611de284611b92565b9250602084013567ffffffffffffffff80821115611cb857600080fd5b60008060408385031215611e1257600080fd5b611e1b83611b92565b915060208301358015158114611e3057600080fd5b809150509250929050565b60008060008060808587031215611e5157600080fd5b611e5a85611b92565b9350611e6860208601611b92565b925060408501359150606085013567ffffffffffffffff811115611e8b57600080fd5b8501601f81018713611e9c57600080fd5b611eab87823560208401611bee565b91505092959194509250565b60008060008060008060c08789031215611ed057600080fd5b611ed987611b92565b9550602087013567ffffffffffffffff80821115611ef657600080fd5b611f028a838b01611c64565b96506040890135915080821115611f1857600080fd5b50611f2589828a01611c64565b945050611f3460608801611b92565b9250611f4260808801611b92565b915060a087013561ffff81168114611f5957600080fd5b809150509295509295509295565b60008060408385031215611f7a57600080fd5b611f8383611b92565b9150611da060208401611b92565b600181811c90821680611fa557607f821691505b60208210811415611fc657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561208257612082612052565b500290565b6000826120a457634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008282101561215857612158612052565b500390565b6000821982111561217057612170612052565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906121fa90830184611b19565b9695505050505050565b60006020828403121561221657600080fd5b8151611b1281611adf56fea2646970667358221220823501a75db5dc736a65db15fc8046305bfe20cb58a8416b3c6c18162f6ebe1864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c806364e9293e116100de57806395d89b4111610097578063c87b56dd11610071578063c87b56dd14610380578063ce3d22e414610393578063e985e9c5146103a6578063f2fde38b146103e257600080fd5b806395d89b4114610352578063a22cb4651461035a578063b88d4fde1461036d57600080fd5b806364e9293e146102da578063669d311c146102fb57806370a082311461030e578063715018a61461032f5780638da5cb5b14610337578063906571471461033f57600080fd5b806323b872dd1161014b57806342966c681161012557806342966c681461028e57806344dcc232146102a1578063510b5158146102b45780636352211e146102c757600080fd5b806323b872dd146102365780632a55205a1461024957806342842e0e1461027b57600080fd5b806301ffc9a71461019357806306fdde03146101bb578063081812fc146101d0578063095ea7b3146101fb5780630c0a9d26146102105780631cbbc6e214610223575b600080fd5b6101a66101a1366004611af5565b6103f5565b60405190151581526020015b60405180910390f35b6101c3610420565b6040516101b29190611b66565b6101e36101de366004611b79565b6104b2565b6040516001600160a01b0390911681526020016101b2565b61020e610209366004611bae565b61053f565b005b6101c361021e366004611b79565b610655565b61020e610231366004611c84565b6106fa565b61020e610244366004611cf1565b610774565b61025c610257366004611d2d565b6107a6565b604080516001600160a01b0390931683526020830191909152016101b2565b61020e610289366004611cf1565b61081d565b61020e61029c366004611b79565b610838565b6101c36102af366004611b79565b61089b565b6101e36102c2366004611b79565b610935565b6101e36102d5366004611b79565b61097b565b6102ed6102e8366004611b79565b6109f2565b6040516101b2929190611d4f565b61020e610309366004611d7d565b610b80565b61032161031c366004611da9565b610be0565b6040519081526020016101b2565b61020e610c67565b6101e3610ca2565b61020e61034d366004611dc4565b610cbb565b6101c3610d52565b61020e610368366004611dff565b610d61565b61020e61037b366004611e3b565b610e26565b6101c361038e366004611b79565b610e58565b61020e6103a1366004611eb7565b610e98565b6101a66103b4366004611f67565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61020e6103f0366004611da9565b611032565b600063152a902d60e11b6001600160e01b03198316148061041a575061041a826110cf565b92915050565b60606065805461042f90611f91565b80601f016020809104026020016040519081016040528092919081815260200182805461045b90611f91565b80156104a85780601f1061047d576101008083540402835291602001916104a8565b820191906000526020600020905b81548152906001019060200180831161048b57829003601f168201915b5050505050905090565b60006104bd8261111f565b6105235760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b600061054a8261097b565b9050806001600160a01b0316836001600160a01b031614156105b85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161051a565b336001600160a01b03821614806105d457506105d481336103b4565b6106465760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161051a565b610650838361113c565b505050565b600081815260ca6020526040902060010180546060919061067590611f91565b80601f01602080910402602001604051908101604052809291908181526020018280546106a190611f91565b80156106ee5780601f106106c3576101008083540402835291602001916106ee565b820191906000526020600020905b8154815290600101906020018083116106d157829003601f168201915b50505050509050919050565b33610703610ca2565b6001600160a01b0316146107295760405162461bcd60e51b815260040161051a90611fcc565b600083815260ca60209081526040909120835161074892850190611a46565b50600083815260ca60209081526040909120825161076e92600190920191840190611a46565b50505050565b61077f335b826111aa565b61079b5760405162461bcd60e51b815260040161051a90612001565b610650838383611294565b600080806107b2610ca2565b6001600160a01b031614156107d4576107c9610ca2565b600091509150610816565b6107dc610ca2565b600085815260ca60205260409020600301546127109061080790600160a01b900461ffff1686612068565b6108119190612087565b915091505b9250929050565b61065083838360405180602001604052806000815250610e26565b6108418161111f565b61084a57600080fd5b61085333610779565b61088f5760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420417070726f7665642160981b604482015260640161051a565b61089881611434565b50565b60c960205260009081526040902080546108b490611f91565b80601f01602080910402602001604051908101604052809291908181526020018280546108e090611f91565b801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b505050505081565b60006109408261111f565b61095c5760405162461bcd60e51b815260040161051a906120a9565b50600090815260ca60205260409020600201546001600160a01b031690565b6000818152606760205260408120546001600160a01b03168061041a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161051a565b606080600060ca60008581526020019081526020016000206040518060a0016040529081600082018054610a2590611f91565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5190611f91565b8015610a9e5780601f10610a7357610100808354040283529160200191610a9e565b820191906000526020600020905b815481529060010190602001808311610a8157829003601f168201915b50505050508152602001600182018054610ab790611f91565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae390611f91565b8015610b305780601f10610b0557610100808354040283529160200191610b30565b820191906000526020600020905b815481529060010190602001808311610b1357829003601f168201915b505050918352505060028201546001600160a01b039081166020808401919091526003909301549081166040830152600160a01b900461ffff166060909101528151910151909590945092505050565b33610b89610ca2565b6001600160a01b031614610baf5760405162461bcd60e51b815260040161051a90611fcc565b600091825260ca602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b038216610c4b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161051a565b506001600160a01b031660009081526068602052604090205490565b33610c70610ca2565b6001600160a01b031614610c965760405162461bcd60e51b815260040161051a90611fcc565b610ca060006114cf565b565b6000610cb66097546001600160a01b031690565b905090565b600054610100900460ff1680610cd4575060005460ff16155b610cf05760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff16158015610d12576000805461ffff19166101011790555b610d1c8383611521565b610d246115a8565b610d2d84611032565b610d3b60cb80546001019055565b801561076e576000805461ff001916905550505050565b60606066805461042f90611f91565b6001600160a01b038216331415610dba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161051a565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610e3033836111aa565b610e4c5760405162461bcd60e51b815260040161051a90612001565b61076e84848484611623565b6060610e638261111f565b610e7f5760405162461bcd60e51b815260040161051a906120a9565b600082815260ca60205260409020805461067590611f91565b6127108161ffff1610610eed5760405162461bcd60e51b815260206004820152601c60248201527f726f79616c747920746f6f2068696768212063616c6d20646f776e2100000000604482015260640161051a565b6000610ef860cb5490565b9050610f048782611656565b6040805160a08101825287815260208082018890526001600160a01b03808816838501528616606083015261ffff85166080830152600084815260ca8252929092208151805192939192610f5b9284920190611a46565b506020828101518051610f749260018501920190611a46565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b031990941692821692909217929092179055841681610fd93390565b6001600160a01b03167fe2c569ed71e28d19c0a19f2527b47c361721165c00055e89f3d82b55b59831ca8989604051611013929190611d4f565b60405180910390a461102960cb80546001019055565b50505050505050565b3361103b610ca2565b6001600160a01b0316146110615760405162461bcd60e51b815260040161051a90611fcc565b6001600160a01b0381166110c65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161051a565b610898816114cf565b60006001600160e01b031982166380ac58cd60e01b148061110057506001600160e01b03198216635b5e139f60e01b145b8061041a57506301ffc9a760e01b6001600160e01b031983161461041a565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906111718261097b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006111b58261111f565b6112165760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161051a565b60006112218361097b565b9050806001600160a01b0316846001600160a01b0316148061125c5750836001600160a01b0316611251846104b2565b6001600160a01b0316145b8061128c57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166112a78261097b565b6001600160a01b03161461130f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161051a565b6001600160a01b0382166113715760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161051a565b61137c60008261113c565b6001600160a01b03831660009081526068602052604081208054600192906113a5908490612146565b90915550506001600160a01b03821660009081526068602052604081208054600192906113d390849061215d565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061143f8261097b565b905061144c60008361113c565b6001600160a01b0381166000908152606860205260408120805460019290611475908490612146565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff168061153a575060005460ff16155b6115565760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff16158015611578576000805461ffff19166101011790555b611580611674565b611588611674565b61159283836116de565b8015610650576000805461ff0019169055505050565b600054610100900460ff16806115c1575060005460ff16155b6115dd5760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff161580156115ff576000805461ffff19166101011790555b611607611674565b61160f611773565b8015610898576000805461ff001916905550565b61162e848484611294565b61163a848484846117d3565b61076e5760405162461bcd60e51b815260040161051a90612175565b6116708282604051806020016040528060008152506118e0565b5050565b600054610100900460ff168061168d575060005460ff16155b6116a95760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff1615801561160f576000805461ffff19166101011790558015610898576000805461ff001916905550565b600054610100900460ff16806116f7575060005460ff16155b6117135760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff16158015611735576000805461ffff19166101011790555b8251611748906065906020860190611a46565b50815161175c906066906020850190611a46565b508015610650576000805461ff0019169055505050565b600054610100900460ff168061178c575060005460ff16155b6117a85760405162461bcd60e51b815260040161051a906120f8565b600054610100900460ff161580156117ca576000805461ffff19166101011790555b61160f336114cf565b60006001600160a01b0384163b156118d557604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906118179033908990889088906004016121c7565b602060405180830381600087803b15801561183157600080fd5b505af1925050508015611861575060408051601f3d908101601f1916820190925261185e91810190612204565b60015b6118bb573d80801561188f576040519150601f19603f3d011682016040523d82523d6000602084013e611894565b606091505b5080516118b35760405162461bcd60e51b815260040161051a90612175565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061128c565b506001949350505050565b6118ea8383611913565b6118f760008484846117d3565b6106505760405162461bcd60e51b815260040161051a90612175565b6001600160a01b0382166119695760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161051a565b6119728161111f565b156119bf5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161051a565b6001600160a01b03821660009081526068602052604081208054600192906119e890849061215d565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611a5290611f91565b90600052602060002090601f016020900481019282611a745760008555611aba565b82601f10611a8d57805160ff1916838001178555611aba565b82800160010185558215611aba579182015b82811115611aba578251825591602001919060010190611a9f565b50611ac6929150611aca565b5090565b5b80821115611ac65760008155600101611acb565b6001600160e01b03198116811461089857600080fd5b600060208284031215611b0757600080fd5b8135611b1281611adf565b9392505050565b6000815180845260005b81811015611b3f57602081850181015186830182015201611b23565b81811115611b51576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611b126020830184611b19565b600060208284031215611b8b57600080fd5b5035919050565b80356001600160a01b0381168114611ba957600080fd5b919050565b60008060408385031215611bc157600080fd5b611bca83611b92565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611c0957611c09611bd8565b604051601f8501601f19908116603f01168101908282118183101715611c3157611c31611bd8565b81604052809350858152868686011115611c4a57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611c7557600080fd5b611b1283833560208501611bee565b600080600060608486031215611c9957600080fd5b83359250602084013567ffffffffffffffff80821115611cb857600080fd5b611cc487838801611c64565b93506040860135915080821115611cda57600080fd5b50611ce786828701611c64565b9150509250925092565b600080600060608486031215611d0657600080fd5b611d0f84611b92565b9250611d1d60208501611b92565b9150604084013590509250925092565b60008060408385031215611d4057600080fd5b50508035926020909101359150565b604081526000611d626040830185611b19565b8281036020840152611d748185611b19565b95945050505050565b60008060408385031215611d9057600080fd5b82359150611da060208401611b92565b90509250929050565b600060208284031215611dbb57600080fd5b611b1282611b92565b600080600060608486031215611dd957600080fd5b611de284611b92565b9250602084013567ffffffffffffffff80821115611cb857600080fd5b60008060408385031215611e1257600080fd5b611e1b83611b92565b915060208301358015158114611e3057600080fd5b809150509250929050565b60008060008060808587031215611e5157600080fd5b611e5a85611b92565b9350611e6860208601611b92565b925060408501359150606085013567ffffffffffffffff811115611e8b57600080fd5b8501601f81018713611e9c57600080fd5b611eab87823560208401611bee565b91505092959194509250565b60008060008060008060c08789031215611ed057600080fd5b611ed987611b92565b9550602087013567ffffffffffffffff80821115611ef657600080fd5b611f028a838b01611c64565b96506040890135915080821115611f1857600080fd5b50611f2589828a01611c64565b945050611f3460608801611b92565b9250611f4260808801611b92565b915060a087013561ffff81168114611f5957600080fd5b809150509295509295509295565b60008060408385031215611f7a57600080fd5b611f8383611b92565b9150611da060208401611b92565b600181811c90821680611fa557607f821691505b60208210811415611fc657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561208257612082612052565b500290565b6000826120a457634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008282101561215857612158612052565b500390565b6000821982111561217057612170612052565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906121fa90830184611b19565b9695505050505050565b60006020828403121561221657600080fd5b8151611b1281611adf56fea2646970667358221220823501a75db5dc736a65db15fc8046305bfe20cb58a8416b3c6c18162f6ebe1864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Mint(address,uint256,address,string,string)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Basic burn function"
      },
      "constructor": {
        "notice": "ooz upgradeable constructor thingy"
      },
      "creator(uint256)": {
        "notice": "returns creator address of token id"
      },
      "getURIs(uint256)": {
        "notice": "get token URIs"
      },
      "mint(address,string,string,address,address,uint16)": {
        "notice": "MINT FUNCTION params should be calldata in  implementation w/ accesscontrol etc. etc. this just test"
      },
      "owner()": {
        "notice": "Basic override for owner interface"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "royalty function, EIP-2981"
      },
      "supportsInterface(bytes4)": {
        "notice": "supports interface"
      },
      "tokenContentURI(uint256)": {
        "notice": "token content URI"
      },
      "tokenMetadataURIs(uint256)": {
        "notice": "Mappings"
      },
      "updateRoyaltyInfo(uint256,address)": {
        "notice": "update royalty info "
      },
      "updateTokenURIs(uint256,string,string)": {
        "notice": "update tokenURIs "
      }
    },
    "notice": "TODO: use ext calls for updating content to reduce opsize ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 152,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 155,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1487,
        "contract": "contracts/CTest.sol:CTest",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1810,
        "contract": "contracts/CTest.sol:CTest",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 221,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 223,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 227,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 231,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 235,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 241,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1037,
        "contract": "contracts/CTest.sol:CTest",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/CTest.sol:CTest",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1869,
        "contract": "contracts/CTest.sol:CTest",
        "label": "tokenMetadataURIs",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1875,
        "contract": "contracts/CTest.sol:CTest",
        "label": "tokenData",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(TokenData)2229_storage)"
      },
      {
        "astId": 1879,
        "contract": "contracts/CTest.sol:CTest",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(Counter)1494_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenData)2229_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICTest.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)2229_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1494_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1493,
            "contract": "contracts/CTest.sol:CTest",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)2229_storage": {
        "encoding": "inplace",
        "label": "struct ICTest.TokenData",
        "members": [
          {
            "astId": 2220,
            "contract": "contracts/CTest.sol:CTest",
            "label": "metadataURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2222,
            "contract": "contracts/CTest.sol:CTest",
            "label": "contentURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2224,
            "contract": "contracts/CTest.sol:CTest",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2226,
            "contract": "contracts/CTest.sol:CTest",
            "label": "royaltyPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2228,
            "contract": "contracts/CTest.sol:CTest",
            "label": "royaltyBPS",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}