{
  "address": "0x159dbb36B8A169928D3Ff32e17E8a96Da072A58E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataUri",
          "type": "string"
        }
      ],
      "name": "MetadataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payout",
          "type": "address"
        }
      ],
      "name": "RoyaltyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "content",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "mime",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            }
          ],
          "internalType": "struct ContentData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contentUri",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_contentHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "metadataUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "payout",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "royaltyBps",
          "type": "uint16"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "creators",
          "type": "address[]"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "setAllowedMintersRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "setTokenPayoutAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newMetadataUri",
          "type": "string"
        }
      ],
      "name": "updateMetadataUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5285221d14e818c42cfe032f6ae7c990077c06c5b1ed2796a182e596fb9701d",
  "receipt": {
    "to": null,
    "from": "0x17ff474427dd67E58d3FB785F00200AD8883c31E",
    "contractAddress": "0x159dbb36B8A169928D3Ff32e17E8a96Da072A58E",
    "transactionIndex": 0,
    "gasUsed": "1947520",
    "logsBloom": "0x
    "blockHash": "0xdb0ab66bcd35aa88234dbd544b275b6e374d9a104f4b6c128fc7414cc3fa3e61",
    "transactionHash": "0xc5285221d14e818c42cfe032f6ae7c990077c06c5b1ed2796a182e596fb9701d",
    "logs": [],
    "blockNumber": 13674621,
    "cumulativeGasUsed": "1947520",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c07217073bd50ec119a968ab39d11265",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payout\",\"type\":\"address\"}],\"name\":\"RoyaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"content\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"mime\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"internalType\":\"struct ContentData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentUri\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payout\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"creators\",\"type\":\"address[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"setAllowedMintersRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setTokenPayoutAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newMetadataUri\",\"type\":\"string\"}],\"name\":\"updateMetadataUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"content(uint256)\":{\"params\":{\"tokenId\":\"token id to retrieve content for\"},\"returns\":{\"_0\":\"ContentData struct of content information\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string)\":{\"details\":\"Sets up ERC721 Token\",\"params\":{\"_name\":\"name of token\",\"_symbol\":\"symbol of token\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Called with the sale price to determine how much royalty is owed and to whom.\",\"params\":{\"salePrice\":\"- the sale price of the NFT asset specified by `tokenId`\",\"tokenId\":\"- the NFT asset queried for royalty information\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment\",\"royaltyAmount\":\"- the royalty payment amount for `salePrice`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setTokenPayoutAdmin(uint256,address)\":{\"params\":{\"newReceiver\":\"address new royalty receiver address\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id to see what is supported\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"token id to get uri for\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMetadataUri(uint256,string)\":{\"params\":{\"newMetadataUri\":\"new metadata uri string\",\"tokenId\":\"token id to update the metadata for\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(string,bytes32,string,address,uint16,bytes32[],address[])\":{\"notice\":\"Mint from merkle proof\"},\"setTokenPayoutAdmin(uint256,address)\":{\"notice\":\"Only callable by owner\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface ERC165 spec calls\"},\"updateMetadataUri(uint256,string)\":{\"notice\":\"Updates the metadata uri to a new string for new schemas / adding licenses and metadata uri updates Only callable by the contract owner when they own the NFT or the creator when they own the NFT.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/zora/CatalogNFT.sol\":\"CatalogNFT\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x70994ca77f6dce93193d744ed99add51b57aef3e56d42b90889f6a2b1444b6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa22a7520aa91e00d994a8fc0c6e17df8331c3224d87a9079ae8b1a97644cbbbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x3d82fc9292d8d34bc25d104ea743684ad7cc3997397b7284f8dcad0ae70155db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/zora/CatalogNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\n/*                                                                                \\n  Catalog.works NFT Contracts\\n*/\\n\\nimport {ITokenContent, ContentData} from \\\"./ITokenContent.sol\\\";\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {MerkleProofUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\n\\n/*\\n * Catalog.works NFT Contracts\\n *\\n * project: Catalog.works NFT Contracts\\n * contract: iain n (@isiain)\\n */\\ncontract CatalogNFT is\\n    OwnableUpgradeable,\\n    ERC721Upgradeable,\\n    ITokenContent,\\n    IERC2981Upgradeable\\n{\\n    event MetadataUpdated(uint256 indexed tokenId, string metadataUri);\\n    event RoyaltyUpdated(uint256 indexed tokenId, address payout);\\n\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    /// Struct to store token info for each token id in contract\\n    struct TokenInfo {\\n        string metadataUri;\\n        string contentUri;\\n        bytes32 contentHash;\\n        address payout;\\n        uint16 royaltyBps;\\n    }\\n\\n    /// Token info struct for rendering out each token in contact\\n    mapping(uint256 => TokenInfo) private tokenInfo;\\n\\n    /// Merkle root for allowed minters\\n    bytes32 allowedMintersRoot;\\n\\n    /// Counter to keep track of the currently minted token\\n    CountersUpgradeable.Counter private tokenIdTracker;\\n\\n    // Guards\\n\\n    /// Modifier to check if the token exists\\n    modifier tokenExists(uint256 tokenId) {\\n        require(_exists(tokenId), \\\"Query for nonexistent token\\\");\\n        _;\\n    }\\n\\n    modifier onlyAllowedMinter(bytes32[] calldata merkleProof) {\\n        // Verify the merkle proof.\\n        bytes32 node = keccak256(abi.encodePacked(msg.sender));\\n        require(\\n            MerkleProofUpgradeable.verify(\\n                merkleProof,\\n                allowedMintersRoot,\\n                node\\n            ),\\n            \\\"Only minter\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Sets up ERC721 Token\\n    /// @param _name name of token\\n    /// @param _symbol symbol of token\\n    function initialize(string memory _name, string memory _symbol)\\n        public\\n        initializer\\n    {\\n        __ERC721_init(_name, _symbol);\\n\\n        __Ownable_init();\\n    }\\n\\n    // User token functions\\n\\n    function burn(uint256 tokenId) external {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"Not allowed\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n        Mint from merkle proof\\n     */\\n    function mint(\\n        string memory contentUri,\\n        bytes32 _contentHash,\\n        string memory metadataUri,\\n        address payout,\\n        uint16 royaltyBps,\\n        bytes32[] calldata merkleProof,\\n        address[] calldata creators\\n    ) public onlyAllowedMinter(merkleProof) returns (uint256) {\\n        require(\\n            royaltyBps < 10000,\\n            \\\"Royalty needs to be less than 10000 bps (100%)\\\"\\n        );\\n        uint256 tokenId = tokenIdTracker.current();\\n        _mint(msg.sender, tokenId);\\n        tokenInfo[tokenId] = TokenInfo({\\n            contentUri: contentUri,\\n            metadataUri: metadataUri,\\n            contentHash: _contentHash,\\n            royaltyBps: royaltyBps,\\n            payout: payout\\n        });\\n        tokenIdTracker.increment();\\n        return tokenId;\\n    }\\n\\n    // Token admin functions\\n\\n    function setAllowedMintersRoot(bytes32 root) external onlyOwner {\\n        allowedMintersRoot = root;\\n    }\\n\\n    /// Updates the metadata uri to a new string for new schemas / adding licenses and metadata uri updates\\n    /// Only callable by the contract owner when they own the NFT or the creator when they own the NFT.\\n    /// @param tokenId token id to update the metadata for\\n    /// @param newMetadataUri new metadata uri string\\n    function updateMetadataUri(uint256 tokenId, string memory newMetadataUri)\\n        external\\n        tokenExists(tokenId)\\n        onlyOwner\\n    {\\n        emit MetadataUpdated(tokenId, newMetadataUri);\\n        tokenInfo[tokenId].metadataUri = newMetadataUri;\\n    }\\n\\n    /// Only callable by owner\\n    /// @param newReceiver address new royalty receiver address\\n    function setTokenPayoutAdmin(uint256 tokenId, address newReceiver)\\n        external\\n        onlyOwner\\n    {\\n        tokenInfo[tokenId].payout = newReceiver;\\n        emit RoyaltyUpdated(tokenId, newReceiver);\\n    }\\n\\n    // Content info getter fns\\n\\n    /// @param tokenId token id to get uri for\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        tokenExists(tokenId)\\n        returns (string memory)\\n    {\\n        return tokenInfo[tokenId].metadataUri;\\n    }\\n\\n    function content(uint256 tokenId)\\n        external\\n        override\\n        returns (ContentData memory)\\n    {\\n        return\\n            ContentData({\\n                uri: tokenInfo[tokenId].contentUri,\\n                hash: tokenInfo[tokenId].contentHash,\\n                mime: \\\"\\\",\\n                content: \\\"\\\"\\n            });\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        override(IERC2981Upgradeable)\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return (\\n            tokenInfo[tokenId].payout,\\n            (salePrice * tokenInfo[tokenId].royaltyBps) / 10000\\n        );\\n    }\\n\\n    /// Interface ERC165 spec calls\\n    /// @param interfaceId interface id to see what is supported\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC721Upgradeable.supportsInterface(interfaceId) ||\\n            interfaceId == type(IERC2981Upgradeable).interfaceId ||\\n            interfaceId == type(ITokenContent).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x4496400084af5cde31e20b17fe61f085d1f865ee6dc7ee18fe8b12e5a54074db\",\"license\":\"GPL-3.0\"},\"contracts/zora/ITokenContent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-v3\\npragma solidity 0.8.6;\\n\\n/*                                                                                \\n    Token content interface\\n    Proposal\\n*/\\n\\nstruct ContentData {\\n    /// URI Referencing the content remotely\\n    string uri;\\n    /// SHA256 content hash\\n    bytes32 hash;\\n    /// Mime type of the content as a string \\\"video/mp4\\\"\\n    string mime;\\n    /// String of the content itself from an on-chain source\\n    string content;\\n}\\n\\n/// Interface to show content getter for token\\ninterface ITokenContent {\\n    /// @param tokenId token id to retrieve content for\\n    /// @return ContentData struct of content information\\n    function content(uint256 tokenId) external returns (ContentData memory);\\n}\",\"keccak256\":\"0xe01a0070a85738cf208a68275a900257b485857f797127c549e766cf088086e8\",\"license\":\"GPL-v3\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612244806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063b88d4fde1161007c578063b88d4fde146102f0578063baa0b80614610303578063c87b56dd14610323578063e8b7388714610336578063e985e9c514610349578063f2fde38b1461035c57600080fd5b806370a0823114610291578063715018a6146102b25780638da5cb5b146102ba57806395d89b41146102c2578063a22cb465146102ca578063b2a28bb8146102dd57600080fd5b806342842e0e1161011557806342842e0e1461021f57806342966c68146102325780634cd88b7614610245578063593d624f146102585780635ac704401461026b5780636352211e1461027e57600080fd5b806301ffc9a71461015d57806306fdde0314610185578063081812fc1461019a578063095ea7b3146101c557806323b872dd146101da5780632a55205a146101ed575b600080fd5b61017061016b366004611c6b565b61036f565b60405190151581526020015b60405180910390f35b61018d6103b6565b60405161017c9190611efb565b6101ad6101a8366004611c52565b610448565b6040516001600160a01b03909116815260200161017c565b6101d86101d3366004611c28565b6104d5565b005b6101d86101e8366004611b34565b6105e6565b6102006101fb366004611e4f565b610617565b604080516001600160a01b03909316835260208301919091520161017c565b6101d861022d366004611b34565b610665565b6101d8610240366004611c52565b610680565b6101d8610253366004611d8b565b6106d0565b6101d8610266366004611c52565b61074f565b6101d8610279366004611e12565b610783565b6101ad61028c366004611c52565b610835565b6102a461029f366004611ae6565b6108ac565b60405190815260200161017c565b6101d8610933565b6101ad61096e565b61018d61097d565b6101d86102d8366004611bec565b61098c565b6101d86102eb366004611def565b610a4d565b6101d86102fe366004611b70565b610ae3565b610316610311366004611c52565b610b15565b60405161017c919061206b565b61018d610331366004611c52565b610c21565b6102a4610344366004611ca5565b610ce9565b610170610357366004611b01565b610f09565b6101d861036a366004611ae6565b610f37565b600061037a82610fd4565b8061039557506001600160e01b0319821663152a902d60e11b145b806103b057506001600160e01b03198216635d505c0360e11b145b92915050565b6060609780546103c590612146565b80601f01602080910402602001604051908101604052809291908181526020018280546103f190612146565b801561043e5780601f106104135761010080835404028352916020019161043e565b820191906000526020600020905b81548152906001019060200180831161042157829003601f168201915b5050505050905090565b600061045382611024565b6104b95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b60006104e082610835565b9050806001600160a01b0316836001600160a01b0316141561054e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104b0565b336001600160a01b038216148061056a575061056a8133610f09565b6105d75760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016104b0565b6105e18383611041565b505050565b6105f033826110af565b61060c5760405162461bcd60e51b81526004016104b09061201a565b6105e1838383611179565b600082815260c9602052604081206003015481906001600160a01b038116906127109061064f90600160a01b900461ffff1686612110565b61065991906120ee565b915091505b9250929050565b6105e183838360405180602001604052806000815250610ae3565b61068a33826110af565b6106c45760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b60448201526064016104b0565b6106cd81611307565b50565b600054610100900460ff16806106e9575060005460ff16155b6107055760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff16158015610727576000805461ffff19166101011790555b6107318383611390565b610739611401565b80156105e1576000805461ff0019169055505050565b3361075861096e565b6001600160a01b03161461077e5760405162461bcd60e51b81526004016104b090611fe5565b60ca55565b8161078d81611024565b6107a95760405162461bcd60e51b81526004016104b090611f0e565b336107b261096e565b6001600160a01b0316146107d85760405162461bcd60e51b81526004016104b090611fe5565b827f459157ba24c7ab9878b165ef465fa6ae2ab42bcd8445f576be378768b0c47309836040516108089190611efb565b60405180910390a2600083815260c960209081526040909120835161082f9285019061193d565b50505050565b6000818152609960205260408120546001600160a01b0316806103b05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104b0565b60006001600160a01b0382166109175760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104b0565b506001600160a01b03166000908152609a602052604090205490565b3361093c61096e565b6001600160a01b0316146109625760405162461bcd60e51b81526004016104b090611fe5565b61096c600061147c565b565b6033546001600160a01b031690565b6060609880546103c590612146565b6001600160a01b0382163314156109e15760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016104b0565b336000818152609c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b33610a5661096e565b6001600160a01b031614610a7c5760405162461bcd60e51b81526004016104b090611fe5565b600082815260c9602090815260409182902060030180546001600160a01b0319166001600160a01b038516908117909155915191825283917f13ceafb5e8ec39102bd452913a5c00a05f3b060d636d3a567c1c80e8b4321fe7910160405180910390a25050565b610aed33836110af565b610b095760405162461bcd60e51b81526004016104b09061201a565b61082f848484846114ce565b6040805160808101825260608082526000602083015291810182905281810191909152604051806080016040528060c960008581526020019081526020016000206001018054610b6490612146565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9090612146565b8015610bdd5780601f10610bb257610100808354040283529160200191610bdd565b820191906000526020600020905b815481529060010190602001808311610bc057829003601f168201915b5050509183525050600093845260c9602090815260408086206002015482840152805180830182528681528184015280519182019052938452606001929092525090565b606081610c2d81611024565b610c495760405162461bcd60e51b81526004016104b090611f0e565b600083815260c9602052604090208054610c6290612146565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8e90612146565b8015610cdb5780601f10610cb057610100808354040283529160200191610cdb565b820191906000526020600020905b815481529060010190602001808311610cbe57829003601f168201915b505050505091505b50919050565b6040516bffffffffffffffffffffffff193360601b166020820152600090859085908390603401604051602081830303815290604052805190602001209050610d698383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060ca549150849050611501565b610da35760405162461bcd60e51b815260206004820152600b60248201526a27b7363c9036b4b73a32b960a91b60448201526064016104b0565b6127108961ffff1610610e0f5760405162461bcd60e51b815260206004820152602e60248201527f526f79616c7479206e6565647320746f206265206c657373207468616e20313060448201526d303030206270732028313030252960901b60648201526084016104b0565b6000610e1a60cb5490565b9050610e2633826115b0565b6040518060a001604052808d81526020018f81526020018e81526020018c6001600160a01b031681526020018b61ffff1681525060c960008381526020019081526020016000206000820151816000019080519060200190610e8992919061193d565b506020828101518051610ea2926001850192019061193d565b506040820151600282015560608201516003909101805460809093015161ffff16600160a01b026001600160b01b03199093166001600160a01b0390921691909117919091179055610ef860cb80546001019055565b9d9c50505050505050505050505050565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b33610f4061096e565b6001600160a01b031614610f665760405162461bcd60e51b81526004016104b090611fe5565b6001600160a01b038116610fcb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b0565b6106cd8161147c565b60006001600160e01b031982166380ac58cd60e01b148061100557506001600160e01b03198216635b5e139f60e01b145b806103b057506301ffc9a760e01b6001600160e01b03198316146103b0565b6000908152609960205260409020546001600160a01b0316151590565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b038416908117909155819061107682610835565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110ba82611024565b61111b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104b0565b600061112683610835565b9050806001600160a01b0316846001600160a01b031614806111615750836001600160a01b031661115684610448565b6001600160a01b0316145b8061117157506111718185610f09565b949350505050565b826001600160a01b031661118c82610835565b6001600160a01b0316146111f45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016104b0565b6001600160a01b0382166112565760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b0565b611261600082611041565b6001600160a01b0383166000908152609a6020526040812080546001929061128a90849061212f565b90915550506001600160a01b0382166000908152609a602052604081208054600192906112b89084906120d6565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206121ef83398151915291a4505050565b600061131282610835565b905061131f600083611041565b6001600160a01b0381166000908152609a6020526040812080546001929061134890849061212f565b909155505060008281526099602052604080822080546001600160a01b0319169055518391906001600160a01b038416906000805160206121ef833981519152908390a45050565b600054610100900460ff16806113a9575060005460ff16155b6113c55760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff161580156113e7576000805461ffff19166101011790555b6113ef6116d1565b6113f76116d1565b610739838361173b565b600054610100900460ff168061141a575060005460ff16155b6114365760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff16158015611458576000805461ffff19166101011790555b6114606116d1565b6114686117d0565b80156106cd576000805461ff001916905550565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6114d9848484611179565b6114e584848484611830565b61082f5760405162461bcd60e51b81526004016104b090611f45565b600081815b85518110156115a5576000868281518110611523576115236121ac565b60200260200101519050808311611565576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611592565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061159d8161217b565b915050611506565b509092149392505050565b6001600160a01b0382166116065760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b0565b61160f81611024565b1561165c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b0565b6001600160a01b0382166000908152609a602052604081208054600192906116859084906120d6565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206121ef833981519152908290a45050565b600054610100900460ff16806116ea575060005460ff16155b6117065760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff16158015611468576000805461ffff191661010117905580156106cd576000805461ff001916905550565b600054610100900460ff1680611754575060005460ff16155b6117705760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff16158015611792576000805461ffff19166101011790555b82516117a590609790602086019061193d565b5081516117b990609890602085019061193d565b5080156105e1576000805461ff0019169055505050565b600054610100900460ff16806117e9575060005460ff16155b6118055760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff16158015611827576000805461ffff19166101011790555b6114683361147c565b60006001600160a01b0384163b1561193257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611874903390899088908890600401611ebe565b602060405180830381600087803b15801561188e57600080fd5b505af19250505080156118be575060408051601f3d908101601f191682019092526118bb91810190611c88565b60015b611918573d8080156118ec576040519150601f19603f3d011682016040523d82523d6000602084013e6118f1565b606091505b5080516119105760405162461bcd60e51b81526004016104b090611f45565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611171565b506001949350505050565b82805461194990612146565b90600052602060002090601f01602090048101928261196b57600085556119b1565b82601f1061198457805160ff19168380011785556119b1565b828001600101855582156119b1579182015b828111156119b1578251825591602001919060010190611996565b506119bd9291506119c1565b5090565b5b808211156119bd57600081556001016119c2565b600067ffffffffffffffff808411156119f1576119f16121c2565b604051601f8501601f19908116603f01168101908282118183101715611a1957611a196121c2565b81604052809350858152868686011115611a3257600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114611a6357600080fd5b919050565b60008083601f840112611a7a57600080fd5b50813567ffffffffffffffff811115611a9257600080fd5b6020830191508360208260051b850101111561065e57600080fd5b600082601f830112611abe57600080fd5b611acd838335602085016119d6565b9392505050565b803561ffff81168114611a6357600080fd5b600060208284031215611af857600080fd5b611acd82611a4c565b60008060408385031215611b1457600080fd5b611b1d83611a4c565b9150611b2b60208401611a4c565b90509250929050565b600080600060608486031215611b4957600080fd5b611b5284611a4c565b9250611b6060208501611a4c565b9150604084013590509250925092565b60008060008060808587031215611b8657600080fd5b611b8f85611a4c565b9350611b9d60208601611a4c565b925060408501359150606085013567ffffffffffffffff811115611bc057600080fd5b8501601f81018713611bd157600080fd5b611be0878235602084016119d6565b91505092959194509250565b60008060408385031215611bff57600080fd5b611c0883611a4c565b915060208301358015158114611c1d57600080fd5b809150509250929050565b60008060408385031215611c3b57600080fd5b611c4483611a4c565b946020939093013593505050565b600060208284031215611c6457600080fd5b5035919050565b600060208284031215611c7d57600080fd5b8135611acd816121d8565b600060208284031215611c9a57600080fd5b8151611acd816121d8565b600080600080600080600080600060e08a8c031215611cc357600080fd5b893567ffffffffffffffff80821115611cdb57600080fd5b611ce78d838e01611aad565b9a5060208c0135995060408c0135915080821115611d0457600080fd5b611d108d838e01611aad565b9850611d1e60608d01611a4c565b9750611d2c60808d01611ad4565b965060a08c0135915080821115611d4257600080fd5b611d4e8d838e01611a68565b909650945060c08c0135915080821115611d6757600080fd5b50611d748c828d01611a68565b915080935050809150509295985092959850929598565b60008060408385031215611d9e57600080fd5b823567ffffffffffffffff80821115611db657600080fd5b611dc286838701611aad565b93506020850135915080821115611dd857600080fd5b50611de585828601611aad565b9150509250929050565b60008060408385031215611e0257600080fd5b82359150611b2b60208401611a4c565b60008060408385031215611e2557600080fd5b82359150602083013567ffffffffffffffff811115611e4357600080fd5b611de585828601611aad565b60008060408385031215611e6257600080fd5b50508035926020909101359150565b6000815180845260005b81811015611e9757602081850181015186830182015201611e7b565b81811115611ea9576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611ef190830184611e71565b9695505050505050565b602081526000611acd6020830184611e71565b6020808252601b908201527f517565727920666f72206e6f6e6578697374656e7420746f6b656e0000000000604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208152600082516080602084015261208760a0840182611e71565b9050602084015160408401526040840151601f19808584030160608601526120af8383611e71565b92506060860151915080858403016080860152506120cd8282611e71565b95945050505050565b600082198211156120e9576120e9612196565b500190565b60008261210b57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561212a5761212a612196565b500290565b60008282101561214157612141612196565b500390565b600181811c9082168061215a57607f821691505b60208210811415610ce357634e487b7160e01b600052602260045260246000fd5b600060001982141561218f5761218f612196565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146106cd57600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220afab3d73f7713738f95dfea1157a0bac3816d0d2970fc92312fed15c0db0f16c64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063b88d4fde1161007c578063b88d4fde146102f0578063baa0b80614610303578063c87b56dd14610323578063e8b7388714610336578063e985e9c514610349578063f2fde38b1461035c57600080fd5b806370a0823114610291578063715018a6146102b25780638da5cb5b146102ba57806395d89b41146102c2578063a22cb465146102ca578063b2a28bb8146102dd57600080fd5b806342842e0e1161011557806342842e0e1461021f57806342966c68146102325780634cd88b7614610245578063593d624f146102585780635ac704401461026b5780636352211e1461027e57600080fd5b806301ffc9a71461015d57806306fdde0314610185578063081812fc1461019a578063095ea7b3146101c557806323b872dd146101da5780632a55205a146101ed575b600080fd5b61017061016b366004611c6b565b61036f565b60405190151581526020015b60405180910390f35b61018d6103b6565b60405161017c9190611efb565b6101ad6101a8366004611c52565b610448565b6040516001600160a01b03909116815260200161017c565b6101d86101d3366004611c28565b6104d5565b005b6101d86101e8366004611b34565b6105e6565b6102006101fb366004611e4f565b610617565b604080516001600160a01b03909316835260208301919091520161017c565b6101d861022d366004611b34565b610665565b6101d8610240366004611c52565b610680565b6101d8610253366004611d8b565b6106d0565b6101d8610266366004611c52565b61074f565b6101d8610279366004611e12565b610783565b6101ad61028c366004611c52565b610835565b6102a461029f366004611ae6565b6108ac565b60405190815260200161017c565b6101d8610933565b6101ad61096e565b61018d61097d565b6101d86102d8366004611bec565b61098c565b6101d86102eb366004611def565b610a4d565b6101d86102fe366004611b70565b610ae3565b610316610311366004611c52565b610b15565b60405161017c919061206b565b61018d610331366004611c52565b610c21565b6102a4610344366004611ca5565b610ce9565b610170610357366004611b01565b610f09565b6101d861036a366004611ae6565b610f37565b600061037a82610fd4565b8061039557506001600160e01b0319821663152a902d60e11b145b806103b057506001600160e01b03198216635d505c0360e11b145b92915050565b6060609780546103c590612146565b80601f01602080910402602001604051908101604052809291908181526020018280546103f190612146565b801561043e5780601f106104135761010080835404028352916020019161043e565b820191906000526020600020905b81548152906001019060200180831161042157829003601f168201915b5050505050905090565b600061045382611024565b6104b95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152609b60205260409020546001600160a01b031690565b60006104e082610835565b9050806001600160a01b0316836001600160a01b0316141561054e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104b0565b336001600160a01b038216148061056a575061056a8133610f09565b6105d75760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016104b0565b6105e18383611041565b505050565b6105f033826110af565b61060c5760405162461bcd60e51b81526004016104b09061201a565b6105e1838383611179565b600082815260c9602052604081206003015481906001600160a01b038116906127109061064f90600160a01b900461ffff1686612110565b61065991906120ee565b915091505b9250929050565b6105e183838360405180602001604052806000815250610ae3565b61068a33826110af565b6106c45760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b60448201526064016104b0565b6106cd81611307565b50565b600054610100900460ff16806106e9575060005460ff16155b6107055760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff16158015610727576000805461ffff19166101011790555b6107318383611390565b610739611401565b80156105e1576000805461ff0019169055505050565b3361075861096e565b6001600160a01b03161461077e5760405162461bcd60e51b81526004016104b090611fe5565b60ca55565b8161078d81611024565b6107a95760405162461bcd60e51b81526004016104b090611f0e565b336107b261096e565b6001600160a01b0316146107d85760405162461bcd60e51b81526004016104b090611fe5565b827f459157ba24c7ab9878b165ef465fa6ae2ab42bcd8445f576be378768b0c47309836040516108089190611efb565b60405180910390a2600083815260c960209081526040909120835161082f9285019061193d565b50505050565b6000818152609960205260408120546001600160a01b0316806103b05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104b0565b60006001600160a01b0382166109175760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104b0565b506001600160a01b03166000908152609a602052604090205490565b3361093c61096e565b6001600160a01b0316146109625760405162461bcd60e51b81526004016104b090611fe5565b61096c600061147c565b565b6033546001600160a01b031690565b6060609880546103c590612146565b6001600160a01b0382163314156109e15760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016104b0565b336000818152609c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b33610a5661096e565b6001600160a01b031614610a7c5760405162461bcd60e51b81526004016104b090611fe5565b600082815260c9602090815260409182902060030180546001600160a01b0319166001600160a01b038516908117909155915191825283917f13ceafb5e8ec39102bd452913a5c00a05f3b060d636d3a567c1c80e8b4321fe7910160405180910390a25050565b610aed33836110af565b610b095760405162461bcd60e51b81526004016104b09061201a565b61082f848484846114ce565b6040805160808101825260608082526000602083015291810182905281810191909152604051806080016040528060c960008581526020019081526020016000206001018054610b6490612146565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9090612146565b8015610bdd5780601f10610bb257610100808354040283529160200191610bdd565b820191906000526020600020905b815481529060010190602001808311610bc057829003601f168201915b5050509183525050600093845260c9602090815260408086206002015482840152805180830182528681528184015280519182019052938452606001929092525090565b606081610c2d81611024565b610c495760405162461bcd60e51b81526004016104b090611f0e565b600083815260c9602052604090208054610c6290612146565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8e90612146565b8015610cdb5780601f10610cb057610100808354040283529160200191610cdb565b820191906000526020600020905b815481529060010190602001808311610cbe57829003601f168201915b505050505091505b50919050565b6040516bffffffffffffffffffffffff193360601b166020820152600090859085908390603401604051602081830303815290604052805190602001209050610d698383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060ca549150849050611501565b610da35760405162461bcd60e51b815260206004820152600b60248201526a27b7363c9036b4b73a32b960a91b60448201526064016104b0565b6127108961ffff1610610e0f5760405162461bcd60e51b815260206004820152602e60248201527f526f79616c7479206e6565647320746f206265206c657373207468616e20313060448201526d303030206270732028313030252960901b60648201526084016104b0565b6000610e1a60cb5490565b9050610e2633826115b0565b6040518060a001604052808d81526020018f81526020018e81526020018c6001600160a01b031681526020018b61ffff1681525060c960008381526020019081526020016000206000820151816000019080519060200190610e8992919061193d565b506020828101518051610ea2926001850192019061193d565b506040820151600282015560608201516003909101805460809093015161ffff16600160a01b026001600160b01b03199093166001600160a01b0390921691909117919091179055610ef860cb80546001019055565b9d9c50505050505050505050505050565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b33610f4061096e565b6001600160a01b031614610f665760405162461bcd60e51b81526004016104b090611fe5565b6001600160a01b038116610fcb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b0565b6106cd8161147c565b60006001600160e01b031982166380ac58cd60e01b148061100557506001600160e01b03198216635b5e139f60e01b145b806103b057506301ffc9a760e01b6001600160e01b03198316146103b0565b6000908152609960205260409020546001600160a01b0316151590565b6000818152609b6020526040902080546001600160a01b0319166001600160a01b038416908117909155819061107682610835565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006110ba82611024565b61111b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104b0565b600061112683610835565b9050806001600160a01b0316846001600160a01b031614806111615750836001600160a01b031661115684610448565b6001600160a01b0316145b8061117157506111718185610f09565b949350505050565b826001600160a01b031661118c82610835565b6001600160a01b0316146111f45760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016104b0565b6001600160a01b0382166112565760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b0565b611261600082611041565b6001600160a01b0383166000908152609a6020526040812080546001929061128a90849061212f565b90915550506001600160a01b0382166000908152609a602052604081208054600192906112b89084906120d6565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206121ef83398151915291a4505050565b600061131282610835565b905061131f600083611041565b6001600160a01b0381166000908152609a6020526040812080546001929061134890849061212f565b909155505060008281526099602052604080822080546001600160a01b0319169055518391906001600160a01b038416906000805160206121ef833981519152908390a45050565b600054610100900460ff16806113a9575060005460ff16155b6113c55760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff161580156113e7576000805461ffff19166101011790555b6113ef6116d1565b6113f76116d1565b610739838361173b565b600054610100900460ff168061141a575060005460ff16155b6114365760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff16158015611458576000805461ffff19166101011790555b6114606116d1565b6114686117d0565b80156106cd576000805461ff001916905550565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6114d9848484611179565b6114e584848484611830565b61082f5760405162461bcd60e51b81526004016104b090611f45565b600081815b85518110156115a5576000868281518110611523576115236121ac565b60200260200101519050808311611565576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611592565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061159d8161217b565b915050611506565b509092149392505050565b6001600160a01b0382166116065760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b0565b61160f81611024565b1561165c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b0565b6001600160a01b0382166000908152609a602052604081208054600192906116859084906120d6565b909155505060008181526099602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206121ef833981519152908290a45050565b600054610100900460ff16806116ea575060005460ff16155b6117065760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff16158015611468576000805461ffff191661010117905580156106cd576000805461ff001916905550565b600054610100900460ff1680611754575060005460ff16155b6117705760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff16158015611792576000805461ffff19166101011790555b82516117a590609790602086019061193d565b5081516117b990609890602085019061193d565b5080156105e1576000805461ff0019169055505050565b600054610100900460ff16806117e9575060005460ff16155b6118055760405162461bcd60e51b81526004016104b090611f97565b600054610100900460ff16158015611827576000805461ffff19166101011790555b6114683361147c565b60006001600160a01b0384163b1561193257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611874903390899088908890600401611ebe565b602060405180830381600087803b15801561188e57600080fd5b505af19250505080156118be575060408051601f3d908101601f191682019092526118bb91810190611c88565b60015b611918573d8080156118ec576040519150601f19603f3d011682016040523d82523d6000602084013e6118f1565b606091505b5080516119105760405162461bcd60e51b81526004016104b090611f45565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611171565b506001949350505050565b82805461194990612146565b90600052602060002090601f01602090048101928261196b57600085556119b1565b82601f1061198457805160ff19168380011785556119b1565b828001600101855582156119b1579182015b828111156119b1578251825591602001919060010190611996565b506119bd9291506119c1565b5090565b5b808211156119bd57600081556001016119c2565b600067ffffffffffffffff808411156119f1576119f16121c2565b604051601f8501601f19908116603f01168101908282118183101715611a1957611a196121c2565b81604052809350858152868686011115611a3257600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114611a6357600080fd5b919050565b60008083601f840112611a7a57600080fd5b50813567ffffffffffffffff811115611a9257600080fd5b6020830191508360208260051b850101111561065e57600080fd5b600082601f830112611abe57600080fd5b611acd838335602085016119d6565b9392505050565b803561ffff81168114611a6357600080fd5b600060208284031215611af857600080fd5b611acd82611a4c565b60008060408385031215611b1457600080fd5b611b1d83611a4c565b9150611b2b60208401611a4c565b90509250929050565b600080600060608486031215611b4957600080fd5b611b5284611a4c565b9250611b6060208501611a4c565b9150604084013590509250925092565b60008060008060808587031215611b8657600080fd5b611b8f85611a4c565b9350611b9d60208601611a4c565b925060408501359150606085013567ffffffffffffffff811115611bc057600080fd5b8501601f81018713611bd157600080fd5b611be0878235602084016119d6565b91505092959194509250565b60008060408385031215611bff57600080fd5b611c0883611a4c565b915060208301358015158114611c1d57600080fd5b809150509250929050565b60008060408385031215611c3b57600080fd5b611c4483611a4c565b946020939093013593505050565b600060208284031215611c6457600080fd5b5035919050565b600060208284031215611c7d57600080fd5b8135611acd816121d8565b600060208284031215611c9a57600080fd5b8151611acd816121d8565b600080600080600080600080600060e08a8c031215611cc357600080fd5b893567ffffffffffffffff80821115611cdb57600080fd5b611ce78d838e01611aad565b9a5060208c0135995060408c0135915080821115611d0457600080fd5b611d108d838e01611aad565b9850611d1e60608d01611a4c565b9750611d2c60808d01611ad4565b965060a08c0135915080821115611d4257600080fd5b611d4e8d838e01611a68565b909650945060c08c0135915080821115611d6757600080fd5b50611d748c828d01611a68565b915080935050809150509295985092959850929598565b60008060408385031215611d9e57600080fd5b823567ffffffffffffffff80821115611db657600080fd5b611dc286838701611aad565b93506020850135915080821115611dd857600080fd5b50611de585828601611aad565b9150509250929050565b60008060408385031215611e0257600080fd5b82359150611b2b60208401611a4c565b60008060408385031215611e2557600080fd5b82359150602083013567ffffffffffffffff811115611e4357600080fd5b611de585828601611aad565b60008060408385031215611e6257600080fd5b50508035926020909101359150565b6000815180845260005b81811015611e9757602081850181015186830182015201611e7b565b81811115611ea9576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611ef190830184611e71565b9695505050505050565b602081526000611acd6020830184611e71565b6020808252601b908201527f517565727920666f72206e6f6e6578697374656e7420746f6b656e0000000000604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208152600082516080602084015261208760a0840182611e71565b9050602084015160408401526040840151601f19808584030160608601526120af8383611e71565b92506060860151915080858403016080860152506120cd8282611e71565b95945050505050565b600082198211156120e9576120e9612196565b500190565b60008261210b57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561212a5761212a612196565b500290565b60008282101561214157612141612196565b500390565b600181811c9082168061215a57607f821691505b60208210811415610ce357634e487b7160e01b600052602260045260246000fd5b600060001982141561218f5761218f612196565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146106cd57600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220afab3d73f7713738f95dfea1157a0bac3816d0d2970fc92312fed15c0db0f16c64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "content(uint256)": {
        "params": {
          "tokenId": "token id to retrieve content for"
        },
        "returns": {
          "_0": "ContentData struct of content information"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string)": {
        "details": "Sets up ERC721 Token",
        "params": {
          "_name": "name of token",
          "_symbol": "symbol of token"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Called with the sale price to determine how much royalty is owed and to whom.",
        "params": {
          "salePrice": "- the sale price of the NFT asset specified by `tokenId`",
          "tokenId": "- the NFT asset queried for royalty information"
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment",
          "royaltyAmount": "- the royalty payment amount for `salePrice`"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setTokenPayoutAdmin(uint256,address)": {
        "params": {
          "newReceiver": "address new royalty receiver address"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id to see what is supported"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "token id to get uri for"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMetadataUri(uint256,string)": {
        "params": {
          "newMetadataUri": "new metadata uri string",
          "tokenId": "token id to update the metadata for"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mint(string,bytes32,string,address,uint16,bytes32[],address[])": {
        "notice": "Mint from merkle proof"
      },
      "setTokenPayoutAdmin(uint256,address)": {
        "notice": "Only callable by owner"
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface ERC165 spec calls"
      },
      "updateMetadataUri(uint256,string)": {
        "notice": "Updates the metadata uri to a new string for new schemas / adding licenses and metadata uri updates Only callable by the contract owner when they own the NFT or the creator when they own the NFT."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 152,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 155,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1487,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1881,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 221,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 223,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 227,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 231,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 235,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 241,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1037,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1952,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_struct(TokenInfo)1946_storage)"
      },
      {
        "astId": 1955,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "allowedMintersRoot",
        "offset": 0,
        "slot": "202",
        "type": "t_bytes32"
      },
      {
        "astId": 1959,
        "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
        "label": "tokenIdTracker",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(Counter)1494_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenInfo)1946_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CatalogNFT.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)1946_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1494_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1493,
            "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenInfo)1946_storage": {
        "encoding": "inplace",
        "label": "struct CatalogNFT.TokenInfo",
        "members": [
          {
            "astId": 1937,
            "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
            "label": "metadataUri",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1939,
            "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
            "label": "contentUri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1941,
            "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
            "label": "contentHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 1943,
            "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
            "label": "payout",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1945,
            "contract": "contracts/zora/CatalogNFT.sol:CatalogNFT",
            "label": "royaltyBps",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}