{
  "address": "0x8C65e4fe08eb10721cBc42C433348B905655bd36",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "MetadataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "RoyaltyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "merkleRootUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "contentURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "royaltyPayout",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "royaltyBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct ITB303.TokenData",
          "name": "_data",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "royaltyPayoutAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenContentURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenMetadataURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "name": "updateMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newRoot",
          "type": "bytes32"
        }
      ],
      "name": "updateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_royaltyPayoutAddress",
          "type": "address"
        }
      ],
      "name": "updateRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contentURI",
          "type": "string"
        }
      ],
      "name": "updateTokenURIs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f7dd89995886d4d0bfe9a5c9f18cccc3f80f8ca7cfb5e25bc088f6a553c9e61",
  "receipt": {
    "to": null,
    "from": "0x17ff474427dd67E58d3FB785F00200AD8883c31E",
    "contractAddress": "0x8C65e4fe08eb10721cBc42C433348B905655bd36",
    "transactionIndex": 0,
    "gasUsed": "2109096",
    "logsBloom": "0x
    "blockHash": "0xeed438c1c54af39a513e1c52e1941c575756b246521bc8a2db365b3c3714b632",
    "transactionHash": "0x5f7dd89995886d4d0bfe9a5c9f18cccc3f80f8ca7cfb5e25bc088f6a553c9e61",
    "logs": [],
    "blockNumber": 21,
    "cumulativeGasUsed": "2109096",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1611806a772f61b205fb176258ddd074",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoyaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"merkleRootUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyPayout\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct ITB303.TokenData\",\"name\":\"_data\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenContentURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMetadataURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"updateMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyPayoutAddress\",\"type\":\"address\"}],\"name\":\"updateRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contentURI\",\"type\":\"string\"}],\"name\":\"updateTokenURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\":   @bretth18 (computerdata) of @catalogworks\",\"details\":\":   Upgradeable ERC721 Contract. See interface for further implemntation details. Purpose built for optmization over the Zora V1 contracts. isian (iain nash) of Zora.  ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"burns given tokenId, restrited to owner (approved artists should burn?)\",\"params\":{\"_tokenId\":\"uint256 identifier of token to burn\"}},\"creator(uint256)\":{\"details\":\"idk what this should be called, and do we need?\",\"params\":{\"_tokenId\":\"uint256 identifier of token to get creator for\"},\"returns\":{\"_0\":\"address creator of given tokenId\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"initialize(string,string)\":{\"details\":\"OZ proxy\",\"params\":{\"_name\":\"string name of the contract\",\"_symbol\":\"string symbol of the contract\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint((string,string,address,address,uint16),bytes32[])\":{\"details\":\"mints a new token to allowlisted msg.sender with a valid merkle proof. params can and should be changed to calldata for gas efficiency. rename to \\\"allowlist\\\"\",\"params\":{\"_data\":\"TokenData struct, see ITB303\",\"_proof\":\"bytes32[] merkle proof of artist wallet. this is created off-chain.  e.g (proof = tree.getHexProof(keccak256(address)))\"},\"returns\":{\"_0\":\"uint256 tokenId of minted token (useful since we are not using Enumerable)\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"override, conforms to EIP-2981\",\"params\":{\"_salePrice\":\"uint256 final sale price of token used to calculate royalty payout\",\"_tokenId\":\"uint256 token id corresponding to the token of which to get royalty information\"}},\"royaltyPayoutAddress(uint256)\":{\"details\":\"not part of EIP2981, but useful \",\"params\":{\"_tokenId\":\"uint256 identifier of token to get royalty payout address for\"},\"returns\":{\"_0\":\"address royalty payout address of given tokenId\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"override \",\"params\":{\"interfaceId\":\"bytes4 id of interface to check\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenContentURI(uint256)\":{\"details\":\"basic public getter method for content URI\",\"params\":{\"_tokenId\":\"uint256 identifier of token to get content URI for\"},\"returns\":{\"_0\":\"string content URI for given tokenId\"}},\"tokenURI(uint256)\":{\"details\":\"override function, returns metadataURI of token stored in tokenData\",\"params\":{\"_tokenId\":\"uint256 token id corresponding to the token of which to get metadata from\"},\"returns\":{\"_0\":\"string containing metadata URI\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMetadataURI(uint256,string)\":{\"details\":\"access controlled, restricted to contract owner when they own the tokenId or the creator (when they own the token)\",\"params\":{\"_metadataURI\":\"string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)\",\"_tokenId\":\"uint256 token id corresponding to the token to update\"}},\"updateRoot(bytes32)\":{\"details\":\"access controlled function, restricted to owner/admim.\",\"params\":{\"_newRoot\":\"bytes32 containing the new root hash, generated off-chain\"}},\"updateRoyaltyInfo(uint256,address)\":{\"details\":\"access controlled to owner only, subject to change. this function allows for emergency royalty control (i.e compromised wallet)\",\"params\":{\"_royaltyPayoutAddress\":\"address of new royalty payout address\",\"_tokenId\":\"uint256 token id corresponding to the token of which to update royalty payout\"}},\"updateTokenURIs(uint256,string,string)\":{\"details\":\"access controlled function, restricted to owner/admim. subject to change.\",\"params\":{\"_contentURI\":\"string containing new/updated media content (subject to change, new EIP)\",\"_metadataURI\":\"string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)\",\"_tokenId\":\"uint256 token id corresponding to the token to update\"}}},\"title\":\":   TB303\",\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdated(uint256,string)\":{\"notice\":\"Events\"},\"merkleRootUpdated(bytes32)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burn Function\"},\"creator(uint256)\":{\"notice\":\"creator Function\"},\"initialize(string,string)\":{\"notice\":\"initialize FunctionInitializes contract with default values, acts as a constructor\"},\"merkleRoot()\":{\"notice\":\"State variable containing merkle root  see {IAngelaList}\"},\"mint((string,string,address,address,uint16),bytes32[])\":{\"notice\":\"mint Function\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"royaltyInfo Function\"},\"royaltyPayoutAddress(uint256)\":{\"notice\":\"royaltyPayoutAddress Function\"},\"supportsInterface(bytes4)\":{\"notice\":\"supportsInterface Function\"},\"tokenContentURI(uint256)\":{\"notice\":\"tokenContentURI Functioncan be retrofitted/replaced with proposed draft 'content' EIP \"},\"tokenMetadataURIs(uint256)\":{\"notice\":\"Mappings\"},\"tokenURI(uint256)\":{\"notice\":\"tokenURI Function\"},\"updateMetadataURI(uint256,string)\":{\"notice\":\"updateMetadataURI Function\"},\"updateRoot(bytes32)\":{\"notice\":\"updateRoot Functionthis function is inherits from Angela.sol, and may not be necessary depending on role based configuration.\"},\"updateRoyaltyInfo(uint256,address)\":{\"notice\":\"updateRoyaltyInfo Function\"},\"updateTokenURIs(uint256,string,string)\":{\"notice\":\"updateTokenURIs Function\"}},\"notice\":\"-------------------------------------------------------------------------------------------------------------------- ooooooooooooo oooooooooo.    .oooo.     .oooo.     .oooo.    8'   888   `8 `888'   `Y8b .dP\\\"\\\"Y88b   d8P'`Y8b  .dP\\\"\\\"Y88b   888       888     888       ]8P' 888    888       ]8P'  888       888oooo888'     <88b.  888    888     <88b.   888       888    `88b      `88b. 888    888      `88b.  888       888    .88P o.   .88P  `88b  d88' o.   .88P   o888o     o888bood8P'  `8bd88P'    `Y8bd8P'  `8bd88P'          ************************************************ LEGAL DISCLAIMER: <legal go here>************************************************ ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                            RINKEBY CNFT (V0: CODENAME \\\"TB303\\\") \\\"TB303\\\"                     :   Creator Shared NFT Media Contract for Catalog Records Inc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/catalog/TB303.sol\":\"TB303\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xd8a3c09ad479d297be526fe6945ca29a018178ba04c2f35081a8dda7faedc7c8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xc88de28441ae0fbf215384ecbc12b675f862dcdf851daa5a6943cef4c91e4373\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x49915fbc84c030ba425312356c1a0a28f81cdee5ab637f7a264752b52243fec6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8116b65b11e0a65ad6cf40cf2d71d2dacad80ddc37ad42af965fc919afb19e5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5f8d2e5137f7603eeaa0516e5b40dc6e637f179edea8134f1dbef9754c9baf2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe0091487bb0da2016b050e276b74e83a3a4fa641f65600558281a3dc3ef24994\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x704add6904e5156bac4fb870ee851af4c2d004ae0cac22fd030162843fd1d611\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0xd0071da2b0b054a9b254845c2e71a9c3dbcf95451ce378f94fcb77ee67fbbede\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"contracts/AngelaList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {MerkleProofUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n\\n/**\\n--------------------------------------------------------------------------------------------------------------------\\n                                                                                        \\n     o                                         o888             ooooo       o88                o8   \\n    888     oo oooooo     oooooooo8 ooooooooo8  888   ooooooo    888        oooo   oooooooo8 o888oo \\n   8  88     888   888  888    88o 888oooooo8   888   ooooo888   888         888  888ooooooo  888   \\n  8oooo88    888   888   888oo888o 888          888 888    888   888      o  888          888 888   \\no88o  o888o o888o o888o 888     888  88oooo888 o888o 88ooo88 8o o888ooooo88 o888o 88oooooo88   888o \\n                         888ooo888       \\n\\n\\\"heute nicht\\\" - Angela Merkel                                                                                                                                                                                                                                                                                                                                                                                                                                       \\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\nTESTNET WIP\\n\\\"AngelaList\\\"                :   Allowlist utility merkle proof contract\\n@author                     :   @bretth18 (computerdata) \\n@title                      :   AngelaList\\n@dev                        :   n/a\\n */\\n\\n\\ncontract AngelaList {\\n\\n    /// State variable containing merkle root \\n    /// see {IAngelaList}\\n    bytes32 public merkleRoot;\\n\\n    /// Events\\n    event merkleRootUpdated(bytes32 _merkleRoot);\\n\\n\\n\\n    /// update merkle root\\n    function updateMerkleRoot(bytes32 _newRoot) internal  {\\n        merkleRoot = _newRoot;\\n        emit merkleRootUpdated(merkleRoot);\\n    }\\n\\n    /// return leaf\\n    function leaf(address _account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account));\\n    }\\n\\n    /// verify proof\\n    function verify(bytes32 _leaf, bytes32[] memory _proof) internal view returns (bool) {\\n        return MerkleProofUpgradeable.verify(_proof, merkleRoot, _leaf);\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x68907394b4d8ee5698ba7271e3e3ca74d756c3d8f0b422afb20d6c12fa07b9ee\",\"license\":\"MIT\"},\"contracts/catalog/TB303.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport {ITB303} from \\\"../interfaces/ITB303.sol\\\";\\nimport {AngelaList} from \\\"../AngelaList.sol\\\";\\n\\n\\n/**\\n--------------------------------------------------------------------------------------------------------------------\\n\\nooooooooooooo oooooooooo.    .oooo.     .oooo.     .oooo.   \\n8'   888   `8 `888'   `Y8b .dP\\\"\\\"Y88b   d8P'`Y8b  .dP\\\"\\\"Y88b  \\n     888       888     888       ]8P' 888    888       ]8P' \\n     888       888oooo888'     <88b.  888    888     <88b.  \\n     888       888    `88b      `88b. 888    888      `88b. \\n     888       888    .88P o.   .88P  `88b  d88' o.   .88P  \\n    o888o     o888bood8P'  `8bd88P'    `Y8bd8P'  `8bd88P'          \\n\\n\\n************************************************\\nLEGAL DISCLAIMER:\\n<legal go here>\\n************************************************\\n\\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\nRINKEBY CNFT (V0: CODENAME \\\"TB303\\\")\\n\\\"TB303\\\"                     :   Creator Shared NFT Media Contract for Catalog Records Inc.\\n@author                     :   @bretth18 (computerdata) of @catalogworks\\n@title                      :   TB303\\n@dev                        :   Upgradeable ERC721 Contract. See interface for further implemntation details.\\n                                Purpose built for optmization over the Zora V1 contracts.\\n                                Code relies heavily on implementations thanks to @ isian (iain nash) of Zora. \\n---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           \\n */\\ncontract TB303 is\\n    ITB303,\\n    ERC721Upgradeable,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable,\\n    AngelaList    \\n{\\n\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    /// Events\\n    event MetadataUpdated(uint256 indexed, string);\\n    event RoyaltyUpdated(uint256 indexed, address indexed);\\n\\n    /// Mappings\\n    mapping(uint256 => string) public tokenMetadataURIs;\\n    /// Maps tokenId to data struct\\n    mapping(uint256 => TokenData) private tokenData;\\n\\n    // Tracking token Id\\n    CountersUpgradeable.Counter private _tokenIdCounter;\\n\\n    /// Modifiers\\n    modifier tokenExists(uint256 _tokenId) {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n        initialize Function\\n        @notice Initializes contract with default values, acts as a constructor\\n        @param _name string name of the contract\\n        @param _symbol string symbol of the contract\\n        @dev OZ proxy\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol\\n    ) public initializer {\\n\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        // Set tokenId to start @ 1\\n        _tokenIdCounter.increment();\\n\\n    }\\n\\n\\n    /**\\n        Burn Function\\n        @param _tokenId uint256 identifier of token to burn\\n        @dev burns given tokenId, restrited to owner (approved artists should burn?)\\n     */\\n    function burn(uint256 _tokenId) external {\\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \\\"Not Approved!\\\");\\n        _burn(_tokenId);\\n    } \\n\\n\\n    /**\\n        tokenContentURI Function\\n        @param _tokenId uint256 identifier of token to get content URI for\\n        @return string content URI for given tokenId\\n        @dev basic public getter method for content URI\\n        @notice can be retrofitted/replaced with proposed draft 'content' EIP \\n     */\\n    function tokenContentURI(uint256 _tokenId) public view returns (string memory) {\\n        return tokenData[_tokenId].contentURI;\\n    }\\n    \\n\\n    /**\\n        creator Function\\n        @param _tokenId uint256 identifier of token to get creator for\\n        @return address creator of given tokenId\\n        @dev idk what this should be called, and do we need?\\n     */\\n    function creator(uint256 _tokenId) public view  returns (address) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        return tokenData[_tokenId].creator;\\n    }\\n\\n\\n    /**\\n        royaltyPayoutAddress Function\\n        @param _tokenId uint256 identifier of token to get royalty payout address for\\n        @return address royalty payout address of given tokenId\\n        @dev not part of EIP2981, but useful \\n     */\\n    function royaltyPayoutAddress(uint256 _tokenId) public view returns (address) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        return tokenData[_tokenId].royaltyPayout;\\n    }\\n\\n\\n    /**\\n        mint Function\\n        @param _data TokenData struct, see ITB303\\n        @param _proof bytes32[] merkle proof of artist wallet. this is created off-chain.  e.g (proof = tree.getHexProof(keccak256(address)))\\n        @return uint256 tokenId of minted token (useful since we are not using Enumerable)\\n        @dev mints a new token to allowlisted msg.sender with a valid merkle proof. params can and should\\n             be changed to calldata for gas efficiency. rename to \\\"allowlist\\\"\\n\\n     */\\n    function mint(\\n        TokenData calldata _data,\\n        bytes32[] calldata _proof\\n    ) external returns (uint256){\\n\\n        /// call angela\\n        require(verify(leaf(_data.creator), _proof), \\\"!valid proof\\\");\\n\\n        require(_data.royaltyBPS < 10000, \\\"royalty 2 high\\\");\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _mint(msg.sender, tokenId);\\n\\n        tokenData[tokenId] = TokenData({\\n            metadataURI: _data.metadataURI,\\n            contentURI: _data.contentURI,\\n            creator: _data.creator,\\n            royaltyPayout: _data.royaltyPayout,\\n            royaltyBPS: _data.royaltyBPS\\n        });\\n\\n        /// increase tokenid\\n        _tokenIdCounter.increment();\\n\\n        return tokenId;\\n    \\n    }\\n\\n\\n    /**\\n        updateTokenURIs Function\\n        @param _tokenId uint256 token id corresponding to the token to update\\n        @param _metadataURI string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)\\n        @param _contentURI string containing new/updated media content (subject to change, new EIP)\\n        @dev access controlled function, restricted to owner/admim. subject to change.\\n     */\\n    function updateTokenURIs(\\n        uint256 _tokenId,\\n        string memory _metadataURI,\\n        string memory _contentURI\\n    ) external onlyOwner {\\n\\n        tokenData[_tokenId].metadataURI = _metadataURI;\\n        tokenData[_tokenId].contentURI = _contentURI;\\n    \\n    \\n        // event heree!\\n    }\\n\\n    /**\\n        updateRoot Function\\n        @param _newRoot bytes32 containing the new root hash, generated off-chain\\n        @dev access controlled function, restricted to owner/admim.\\n        @notice this function is inherits from Angela.sol, and may not be necessary depending\\n                on role based configuration.\\n     */\\n    function updateRoot(bytes32 _newRoot) external onlyOwner {\\n        updateMerkleRoot(_newRoot);\\n    }\\n\\n\\n    /**\\n        updateMetadataURI Function\\n        @param _tokenId uint256 token id corresponding to the token to update\\n        @param _metadataURI string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)\\n        @dev access controlled, restricted to contract owner when they own the tokenId or the creator (when they own the token)\\n     */\\n    function updateMetadataURI(\\n        uint256 _tokenId,\\n        string memory _metadataURI\\n    ) external tokenExists(_tokenId) onlyOwner {\\n        // event \\n        emit MetadataUpdated(_tokenId, _metadataURI);\\n\\n        tokenData[_tokenId].metadataURI = _metadataURI;\\n    }\\n    \\n\\n    /**\\n        tokenURI Function\\n        @param _tokenId uint256 token id corresponding to the token of which to get metadata from\\n        @return string containing metadata URI\\n        @dev override function, returns metadataURI of token stored in tokenData\\n     */\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        return tokenData[_tokenId].metadataURI;\\n    }\\n\\n\\n    /**\\n        updateRoyaltyInfo Function\\n        @param _tokenId uint256 token id corresponding to the token of which to update royalty payout\\n        @param _royaltyPayoutAddress address of new royalty payout address\\n        @dev access controlled to owner only, subject to change. this function allows for emergency royalty control (i.e compromised wallet)\\n     */\\n    function updateRoyaltyInfo(uint256 _tokenId, address _royaltyPayoutAddress) external onlyOwner {\\n\\n        emit RoyaltyUpdated(_tokenId, _royaltyPayoutAddress);\\n        tokenData[_tokenId].royaltyPayout = _royaltyPayoutAddress;\\n    \\n    }\\n\\n\\n    /**\\n        royaltyInfo Function\\n        @param _tokenId uint256 token id corresponding to the token of which to get royalty information\\n        @param _salePrice uint256 final sale price of token used to calculate royalty payout\\n        @dev override, conforms to EIP-2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) \\n        external \\n        view \\n        override \\n        returns (address receiver, uint256 royaltyAmount) {\\n\\n        /// Don't give royalties to a bottomless pit lol. \\n        if(owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n\\n        return (owner(), (_salePrice * tokenData[_tokenId].royaltyBPS) / 10_000);\\n    }\\n    \\n\\n    /**\\n        supportsInterface Function\\n        @param interfaceId bytes4 id of interface to check\\n        @dev override \\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public \\n        view\\n        virtual\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool) {\\n        \\n        return \\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n            // || type(ITokenContent).interfaceId == intefaceId;\\n    \\n    }\\n\\n\\n}\",\"keccak256\":\"0x5680584a338b7414faae8f2fcfe0e89ce6120b592d23b532aa377d57be79c82e\",\"license\":\"MIT\"},\"contracts/interfaces/ITB303.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n\\n/// base interface for Catalog cNFT TEST\\ninterface ITB303 {\\n\\n    /// token data (metadata and content)\\n    /**\\n        @param metadataURI string containing metadata (e.g IPFS URI pointing to metadata.json)\\n        @param contentURI string containing media content (subject to change, new EIP)\\n        @param creator address of creator of token\\n        @param royaltyPayout address of royalty payout address\\n        @param royaltyBPS uint16 royalty percentage of creator. must be less than 10_000\\n     */\\n    struct TokenData {\\n        string metadataURI;\\n        string contentURI;\\n        address creator;\\n        address royaltyPayout;\\n        uint16 royaltyBPS;\\n    }\\n\\n}\",\"keccak256\":\"0xb31b7e32d963e0a7a48223bdfb8d7540b91680b73866678a27bab45e3b315903\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612531806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063510b5158116101045780638fe86b3f116100a2578063c87b56dd11610071578063c87b56dd146103eb578063e985e9c5146103fe578063f2fde38b1461043a578063fbd8d2831461044d57600080fd5b80638fe86b3f146103aa57806395d89b41146103bd578063a22cb465146103c5578063b88d4fde146103d857600080fd5b8063669d311c116100de578063669d311c1461036b57806370a082311461037e578063715018a6146103915780638da5cb5b1461039957600080fd5b8063510b515814610332578063514eaa25146103455780636352211e1461035857600080fd5b806323b872dd1161017157806342842e0e1161014b57806342842e0e146102e657806342966c68146102f957806344dcc2321461030c5780634cd88b761461031f57600080fd5b806323b872dd1461028a5780632a55205a1461029d5780632eb4a7ab146102cf57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c5780630c0a9d26146102515780631cbbc6e21461026457806321ff99701461027757600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611d10565b610460565b60405190151581526020015b60405180910390f35b61020461048b565b6040516101f39190611d7a565b61022461021f366004611d8d565b61051d565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611dc2565b6105aa565b005b61020461025f366004611d8d565b6106c0565b61024f610272366004611e98565b610765565b61024f610285366004611d8d565b6107da565b61024f610298366004611f05565b610810565b6102b06102ab366004611f41565b610841565b604080516001600160a01b0390931683526020830191909152016101f3565b6102d860c95481565b6040519081526020016101f3565b61024f6102f4366004611f05565b6108c8565b61024f610307366004611d8d565b6108e3565b61020461031a366004611d8d565b610932565b61024f61032d366004611f63565b6109cc565b610224610340366004611d8d565b610a59565b6102d8610353366004611fc7565b610a9f565b610224610366366004611d8d565b610d72565b61024f610379366004612069565b610de9565b6102d861038c366004612095565b610e7a565b61024f610f01565b6097546001600160a01b0316610224565b61024f6103b83660046120b0565b610f37565b610204611005565b61024f6103d33660046120ed565b611014565b61024f6103e6366004612129565b611023565b6102046103f9366004611d8d565b611055565b6101e761040c3660046121a5565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61024f610448366004612095565b611095565b61022461045b366004611d8d565b61112d565b600063152a902d60e11b6001600160e01b031983161480610485575061048582611173565b92915050565b60606065805461049a906121cf565b80601f01602080910402602001604051908101604052809291908181526020018280546104c6906121cf565b80156105135780601f106104e857610100808354040283529160200191610513565b820191906000526020600020905b8154815290600101906020018083116104f657829003601f168201915b5050505050905090565b6000610528826111c3565b61058e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006105b582610d72565b9050806001600160a01b0316836001600160a01b031614156106235760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610585565b336001600160a01b038216148061063f575061063f813361040c565b6106b15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610585565b6106bb83836111e0565b505050565b600081815260cb602052604090206001018054606091906106e0906121cf565b80601f016020809104026020016040519081016040528092919081815260200182805461070c906121cf565b80156107595780601f1061072e57610100808354040283529160200191610759565b820191906000526020600020905b81548152906001019060200180831161073c57829003601f168201915b50505050509050919050565b6097546001600160a01b0316331461078f5760405162461bcd60e51b81526004016105859061220a565b600083815260cb6020908152604090912083516107ae92850190611c61565b50600083815260cb6020908152604090912082516107d492600190920191840190611c61565b50505050565b6097546001600160a01b031633146108045760405162461bcd60e51b81526004016105859061220a565b61080d8161124e565b50565b61081a3382611289565b6108365760405162461bcd60e51b81526004016105859061223f565b6106bb83838361136f565b600080806108576097546001600160a01b031690565b6001600160a01b0316141561087b5750506097546001600160a01b031660006108c1565b6097546001600160a01b0316600085815260cb6020526040902060030154612710906108b290600160a01b900461ffff16866122a6565b6108bc91906122c5565b915091505b9250929050565b6106bb83838360405180602001604052806000815250611023565b6108ed3382611289565b6109295760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420417070726f7665642160981b6044820152606401610585565b61080d8161150f565b60ca602052600090815260409020805461094b906121cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610977906121cf565b80156109c45780601f10610999576101008083540402835291602001916109c4565b820191906000526020600020905b8154815290600101906020018083116109a757829003601f168201915b505050505081565b600054610100900460ff16806109e5575060005460ff16155b610a015760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff16158015610a23576000805461ffff19166101011790555b610a2d83836115aa565b610a3561161b565b610a4360cc80546001019055565b80156106bb576000805461ff0019169055505050565b6000610a64826111c3565b610a805760405162461bcd60e51b815260040161058590612335565b50600090815260cb60205260409020600201546001600160a01b031690565b6000610b2f610af6610ab76060870160408801612095565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061169692505050565b610b6a5760405162461bcd60e51b815260206004820152600c60248201526b10bb30b634b210383937b7b360a11b6044820152606401610585565b612710610b7d60a0860160808701612384565b61ffff1610610bbf5760405162461bcd60e51b815260206004820152600e60248201526d0e4def2c2d8e8f2406440d0d2ced60931b6044820152606401610585565b6000610bca60cc5490565b9050610bd633826116ac565b6040805160a0810190915280610bec87806123a8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602090810190610c35908801886123a8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001610c7f6060880160408901612095565b6001600160a01b03168152602001610c9d6080880160608901612095565b6001600160a01b03168152602001610cbb60a0880160808901612384565b61ffff169052600082815260cb60209081526040909120825180519192610ce792849290910190611c61565b506020828101518051610d009260018501920190611c61565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b03199094169290911691909117919091179055610d6a60cc80546001019055565b949350505050565b6000818152606760205260408120546001600160a01b0316806104855760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610585565b6097546001600160a01b03163314610e135760405162461bcd60e51b81526004016105859061220a565b6040516001600160a01b0382169083907f13ceafb5e8ec39102bd452913a5c00a05f3b060d636d3a567c1c80e8b4321fe790600090a3600091825260cb602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b038216610ee55760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610585565b506001600160a01b031660009081526068602052604090205490565b6097546001600160a01b03163314610f2b5760405162461bcd60e51b81526004016105859061220a565b610f3560006117df565b565b81610f41816111c3565b610f845760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610585565b6097546001600160a01b03163314610fae5760405162461bcd60e51b81526004016105859061220a565b827f459157ba24c7ab9878b165ef465fa6ae2ab42bcd8445f576be378768b0c4730983604051610fde9190611d7a565b60405180910390a2600083815260cb6020908152604090912083516107d492850190611c61565b60606066805461049a906121cf565b61101f338383611831565b5050565b61102d3383611289565b6110495760405162461bcd60e51b81526004016105859061223f565b6107d484848484611900565b6060611060826111c3565b61107c5760405162461bcd60e51b815260040161058590612335565b600082815260cb6020526040902080546106e0906121cf565b6097546001600160a01b031633146110bf5760405162461bcd60e51b81526004016105859061220a565b6001600160a01b0381166111245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610585565b61080d816117df565b6000611138826111c3565b6111545760405162461bcd60e51b815260040161058590612335565b50600090815260cb60205260409020600301546001600160a01b031690565b60006001600160e01b031982166380ac58cd60e01b14806111a457506001600160e01b03198216635b5e139f60e01b145b8061048557506301ffc9a760e01b6001600160e01b0319831614610485565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061121582610d72565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60c98190556040518181527fa2bc4a36b1e221bdcc16df9d7c15559a5f4f9902519c0f92ad3198f1df005e8b9060200160405180910390a150565b6000611294826111c3565b6112f55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610585565b600061130083610d72565b9050806001600160a01b0316846001600160a01b0316148061133b5750836001600160a01b03166113308461051d565b6001600160a01b0316145b80610d6a57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16610d6a565b826001600160a01b031661138282610d72565b6001600160a01b0316146113ea5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610585565b6001600160a01b03821661144c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610585565b6114576000826111e0565b6001600160a01b03831660009081526068602052604081208054600192906114809084906123ef565b90915550506001600160a01b03821660009081526068602052604081208054600192906114ae908490612406565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061151a82610d72565b90506115276000836111e0565b6001600160a01b03811660009081526068602052604081208054600192906115509084906123ef565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff16806115c3575060005460ff16155b6115df5760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff16158015611601576000805461ffff19166101011790555b611609611933565b611611611933565b610a43838361199d565b600054610100900460ff1680611634575060005460ff16155b6116505760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff16158015611672576000805461ffff19166101011790555b61167a611933565b611682611a32565b801561080d576000805461ff001916905550565b60006116a58260c95485611a92565b9392505050565b6001600160a01b0382166117025760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610585565b61170b816111c3565b156117585760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610585565b6001600160a01b0382166000908152606860205260408120805460019290611781908490612406565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156118935760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610585565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61190b84848461136f565b61191784848484611aa8565b6107d45760405162461bcd60e51b81526004016105859061241e565b600054610100900460ff168061194c575060005460ff16155b6119685760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff16158015611682576000805461ffff1916610101179055801561080d576000805461ff001916905550565b600054610100900460ff16806119b6575060005460ff16155b6119d25760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff161580156119f4576000805461ffff19166101011790555b8251611a07906065906020860190611c61565b508151611a1b906066906020850190611c61565b5080156106bb576000805461ff0019169055505050565b600054610100900460ff1680611a4b575060005460ff16155b611a675760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff16158015611a89576000805461ffff19166101011790555b611682336117df565b600082611a9f8584611bb5565b14949350505050565b60006001600160a01b0384163b15611baa57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611aec903390899088908890600401612470565b602060405180830381600087803b158015611b0657600080fd5b505af1925050508015611b36575060408051601f3d908101601f19168201909252611b33918101906124ad565b60015b611b90573d808015611b64576040519150601f19603f3d011682016040523d82523d6000602084013e611b69565b606091505b508051611b885760405162461bcd60e51b81526004016105859061241e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610d6a565b506001949350505050565b600081815b8451811015611c59576000858281518110611bd757611bd76124ca565b60200260200101519050808311611c19576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611c46565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080611c51816124e0565b915050611bba565b509392505050565b828054611c6d906121cf565b90600052602060002090601f016020900481019282611c8f5760008555611cd5565b82601f10611ca857805160ff1916838001178555611cd5565b82800160010185558215611cd5579182015b82811115611cd5578251825591602001919060010190611cba565b50611ce1929150611ce5565b5090565b5b80821115611ce15760008155600101611ce6565b6001600160e01b03198116811461080d57600080fd5b600060208284031215611d2257600080fd5b81356116a581611cfa565b6000815180845260005b81811015611d5357602081850181015186830182015201611d37565b81811115611d65576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006116a56020830184611d2d565b600060208284031215611d9f57600080fd5b5035919050565b80356001600160a01b0381168114611dbd57600080fd5b919050565b60008060408385031215611dd557600080fd5b611dde83611da6565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611e1d57611e1d611dec565b604051601f8501601f19908116603f01168101908282118183101715611e4557611e45611dec565b81604052809350858152868686011115611e5e57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611e8957600080fd5b6116a583833560208501611e02565b600080600060608486031215611ead57600080fd5b83359250602084013567ffffffffffffffff80821115611ecc57600080fd5b611ed887838801611e78565b93506040860135915080821115611eee57600080fd5b50611efb86828701611e78565b9150509250925092565b600080600060608486031215611f1a57600080fd5b611f2384611da6565b9250611f3160208501611da6565b9150604084013590509250925092565b60008060408385031215611f5457600080fd5b50508035926020909101359150565b60008060408385031215611f7657600080fd5b823567ffffffffffffffff80821115611f8e57600080fd5b611f9a86838701611e78565b93506020850135915080821115611fb057600080fd5b50611fbd85828601611e78565b9150509250929050565b600080600060408486031215611fdc57600080fd5b833567ffffffffffffffff80821115611ff457600080fd5b9085019060a0828803121561200857600080fd5b9093506020850135908082111561201e57600080fd5b818601915086601f83011261203257600080fd5b81358181111561204157600080fd5b8760208260051b850101111561205657600080fd5b6020830194508093505050509250925092565b6000806040838503121561207c57600080fd5b8235915061208c60208401611da6565b90509250929050565b6000602082840312156120a757600080fd5b6116a582611da6565b600080604083850312156120c357600080fd5b82359150602083013567ffffffffffffffff8111156120e157600080fd5b611fbd85828601611e78565b6000806040838503121561210057600080fd5b61210983611da6565b91506020830135801515811461211e57600080fd5b809150509250929050565b6000806000806080858703121561213f57600080fd5b61214885611da6565b935061215660208601611da6565b925060408501359150606085013567ffffffffffffffff81111561217957600080fd5b8501601f8101871361218a57600080fd5b61219987823560208401611e02565b91505092959194509250565b600080604083850312156121b857600080fd5b6121c183611da6565b915061208c60208401611da6565b600181811c908216806121e357607f821691505b6020821081141561220457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156122c0576122c0612290565b500290565b6000826122e257634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60006020828403121561239657600080fd5b813561ffff811681146116a557600080fd5b6000808335601e198436030181126123bf57600080fd5b83018035915067ffffffffffffffff8211156123da57600080fd5b6020019150368190038213156108c157600080fd5b60008282101561240157612401612290565b500390565b6000821982111561241957612419612290565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906124a390830184611d2d565b9695505050505050565b6000602082840312156124bf57600080fd5b81516116a581611cfa565b634e487b7160e01b600052603260045260246000fd5b60006000198214156124f4576124f4612290565b506001019056fea26469706673582212205b1cf9a475f5ddd79a0ae85ec9f2d1fb297bd8f524117274d0646ec0d32c2cdb64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063510b5158116101045780638fe86b3f116100a2578063c87b56dd11610071578063c87b56dd146103eb578063e985e9c5146103fe578063f2fde38b1461043a578063fbd8d2831461044d57600080fd5b80638fe86b3f146103aa57806395d89b41146103bd578063a22cb465146103c5578063b88d4fde146103d857600080fd5b8063669d311c116100de578063669d311c1461036b57806370a082311461037e578063715018a6146103915780638da5cb5b1461039957600080fd5b8063510b515814610332578063514eaa25146103455780636352211e1461035857600080fd5b806323b872dd1161017157806342842e0e1161014b57806342842e0e146102e657806342966c68146102f957806344dcc2321461030c5780634cd88b761461031f57600080fd5b806323b872dd1461028a5780632a55205a1461029d5780632eb4a7ab146102cf57600080fd5b8063095ea7b3116101ad578063095ea7b31461023c5780630c0a9d26146102515780631cbbc6e21461026457806321ff99701461027757600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611d10565b610460565b60405190151581526020015b60405180910390f35b61020461048b565b6040516101f39190611d7a565b61022461021f366004611d8d565b61051d565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611dc2565b6105aa565b005b61020461025f366004611d8d565b6106c0565b61024f610272366004611e98565b610765565b61024f610285366004611d8d565b6107da565b61024f610298366004611f05565b610810565b6102b06102ab366004611f41565b610841565b604080516001600160a01b0390931683526020830191909152016101f3565b6102d860c95481565b6040519081526020016101f3565b61024f6102f4366004611f05565b6108c8565b61024f610307366004611d8d565b6108e3565b61020461031a366004611d8d565b610932565b61024f61032d366004611f63565b6109cc565b610224610340366004611d8d565b610a59565b6102d8610353366004611fc7565b610a9f565b610224610366366004611d8d565b610d72565b61024f610379366004612069565b610de9565b6102d861038c366004612095565b610e7a565b61024f610f01565b6097546001600160a01b0316610224565b61024f6103b83660046120b0565b610f37565b610204611005565b61024f6103d33660046120ed565b611014565b61024f6103e6366004612129565b611023565b6102046103f9366004611d8d565b611055565b6101e761040c3660046121a5565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61024f610448366004612095565b611095565b61022461045b366004611d8d565b61112d565b600063152a902d60e11b6001600160e01b031983161480610485575061048582611173565b92915050565b60606065805461049a906121cf565b80601f01602080910402602001604051908101604052809291908181526020018280546104c6906121cf565b80156105135780601f106104e857610100808354040283529160200191610513565b820191906000526020600020905b8154815290600101906020018083116104f657829003601f168201915b5050505050905090565b6000610528826111c3565b61058e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006105b582610d72565b9050806001600160a01b0316836001600160a01b031614156106235760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610585565b336001600160a01b038216148061063f575061063f813361040c565b6106b15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610585565b6106bb83836111e0565b505050565b600081815260cb602052604090206001018054606091906106e0906121cf565b80601f016020809104026020016040519081016040528092919081815260200182805461070c906121cf565b80156107595780601f1061072e57610100808354040283529160200191610759565b820191906000526020600020905b81548152906001019060200180831161073c57829003601f168201915b50505050509050919050565b6097546001600160a01b0316331461078f5760405162461bcd60e51b81526004016105859061220a565b600083815260cb6020908152604090912083516107ae92850190611c61565b50600083815260cb6020908152604090912082516107d492600190920191840190611c61565b50505050565b6097546001600160a01b031633146108045760405162461bcd60e51b81526004016105859061220a565b61080d8161124e565b50565b61081a3382611289565b6108365760405162461bcd60e51b81526004016105859061223f565b6106bb83838361136f565b600080806108576097546001600160a01b031690565b6001600160a01b0316141561087b5750506097546001600160a01b031660006108c1565b6097546001600160a01b0316600085815260cb6020526040902060030154612710906108b290600160a01b900461ffff16866122a6565b6108bc91906122c5565b915091505b9250929050565b6106bb83838360405180602001604052806000815250611023565b6108ed3382611289565b6109295760405162461bcd60e51b815260206004820152600d60248201526c4e6f7420417070726f7665642160981b6044820152606401610585565b61080d8161150f565b60ca602052600090815260409020805461094b906121cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610977906121cf565b80156109c45780601f10610999576101008083540402835291602001916109c4565b820191906000526020600020905b8154815290600101906020018083116109a757829003601f168201915b505050505081565b600054610100900460ff16806109e5575060005460ff16155b610a015760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff16158015610a23576000805461ffff19166101011790555b610a2d83836115aa565b610a3561161b565b610a4360cc80546001019055565b80156106bb576000805461ff0019169055505050565b6000610a64826111c3565b610a805760405162461bcd60e51b815260040161058590612335565b50600090815260cb60205260409020600201546001600160a01b031690565b6000610b2f610af6610ab76060870160408801612095565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061169692505050565b610b6a5760405162461bcd60e51b815260206004820152600c60248201526b10bb30b634b210383937b7b360a11b6044820152606401610585565b612710610b7d60a0860160808701612384565b61ffff1610610bbf5760405162461bcd60e51b815260206004820152600e60248201526d0e4def2c2d8e8f2406440d0d2ced60931b6044820152606401610585565b6000610bca60cc5490565b9050610bd633826116ac565b6040805160a0810190915280610bec87806123a8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602090810190610c35908801886123a8565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001610c7f6060880160408901612095565b6001600160a01b03168152602001610c9d6080880160608901612095565b6001600160a01b03168152602001610cbb60a0880160808901612384565b61ffff169052600082815260cb60209081526040909120825180519192610ce792849290910190611c61565b506020828101518051610d009260018501920190611c61565b5060408201516002820180546001600160a01b039283166001600160a01b031990911617905560608301516003909201805460809094015161ffff16600160a01b026001600160b01b03199094169290911691909117919091179055610d6a60cc80546001019055565b949350505050565b6000818152606760205260408120546001600160a01b0316806104855760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610585565b6097546001600160a01b03163314610e135760405162461bcd60e51b81526004016105859061220a565b6040516001600160a01b0382169083907f13ceafb5e8ec39102bd452913a5c00a05f3b060d636d3a567c1c80e8b4321fe790600090a3600091825260cb602052604090912060030180546001600160a01b0319166001600160a01b03909216919091179055565b60006001600160a01b038216610ee55760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610585565b506001600160a01b031660009081526068602052604090205490565b6097546001600160a01b03163314610f2b5760405162461bcd60e51b81526004016105859061220a565b610f3560006117df565b565b81610f41816111c3565b610f845760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610585565b6097546001600160a01b03163314610fae5760405162461bcd60e51b81526004016105859061220a565b827f459157ba24c7ab9878b165ef465fa6ae2ab42bcd8445f576be378768b0c4730983604051610fde9190611d7a565b60405180910390a2600083815260cb6020908152604090912083516107d492850190611c61565b60606066805461049a906121cf565b61101f338383611831565b5050565b61102d3383611289565b6110495760405162461bcd60e51b81526004016105859061223f565b6107d484848484611900565b6060611060826111c3565b61107c5760405162461bcd60e51b815260040161058590612335565b600082815260cb6020526040902080546106e0906121cf565b6097546001600160a01b031633146110bf5760405162461bcd60e51b81526004016105859061220a565b6001600160a01b0381166111245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610585565b61080d816117df565b6000611138826111c3565b6111545760405162461bcd60e51b815260040161058590612335565b50600090815260cb60205260409020600301546001600160a01b031690565b60006001600160e01b031982166380ac58cd60e01b14806111a457506001600160e01b03198216635b5e139f60e01b145b8061048557506301ffc9a760e01b6001600160e01b0319831614610485565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061121582610d72565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60c98190556040518181527fa2bc4a36b1e221bdcc16df9d7c15559a5f4f9902519c0f92ad3198f1df005e8b9060200160405180910390a150565b6000611294826111c3565b6112f55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610585565b600061130083610d72565b9050806001600160a01b0316846001600160a01b0316148061133b5750836001600160a01b03166113308461051d565b6001600160a01b0316145b80610d6a57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16610d6a565b826001600160a01b031661138282610d72565b6001600160a01b0316146113ea5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610585565b6001600160a01b03821661144c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610585565b6114576000826111e0565b6001600160a01b03831660009081526068602052604081208054600192906114809084906123ef565b90915550506001600160a01b03821660009081526068602052604081208054600192906114ae908490612406565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061151a82610d72565b90506115276000836111e0565b6001600160a01b03811660009081526068602052604081208054600192906115509084906123ef565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff16806115c3575060005460ff16155b6115df5760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff16158015611601576000805461ffff19166101011790555b611609611933565b611611611933565b610a43838361199d565b600054610100900460ff1680611634575060005460ff16155b6116505760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff16158015611672576000805461ffff19166101011790555b61167a611933565b611682611a32565b801561080d576000805461ff001916905550565b60006116a58260c95485611a92565b9392505050565b6001600160a01b0382166117025760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610585565b61170b816111c3565b156117585760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610585565b6001600160a01b0382166000908152606860205260408120805460019290611781908490612406565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156118935760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610585565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61190b84848461136f565b61191784848484611aa8565b6107d45760405162461bcd60e51b81526004016105859061241e565b600054610100900460ff168061194c575060005460ff16155b6119685760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff16158015611682576000805461ffff1916610101179055801561080d576000805461ff001916905550565b600054610100900460ff16806119b6575060005460ff16155b6119d25760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff161580156119f4576000805461ffff19166101011790555b8251611a07906065906020860190611c61565b508151611a1b906066906020850190611c61565b5080156106bb576000805461ff0019169055505050565b600054610100900460ff1680611a4b575060005460ff16155b611a675760405162461bcd60e51b8152600401610585906122e7565b600054610100900460ff16158015611a89576000805461ffff19166101011790555b611682336117df565b600082611a9f8584611bb5565b14949350505050565b60006001600160a01b0384163b15611baa57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611aec903390899088908890600401612470565b602060405180830381600087803b158015611b0657600080fd5b505af1925050508015611b36575060408051601f3d908101601f19168201909252611b33918101906124ad565b60015b611b90573d808015611b64576040519150601f19603f3d011682016040523d82523d6000602084013e611b69565b606091505b508051611b885760405162461bcd60e51b81526004016105859061241e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610d6a565b506001949350505050565b600081815b8451811015611c59576000858281518110611bd757611bd76124ca565b60200260200101519050808311611c19576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611c46565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b5080611c51816124e0565b915050611bba565b509392505050565b828054611c6d906121cf565b90600052602060002090601f016020900481019282611c8f5760008555611cd5565b82601f10611ca857805160ff1916838001178555611cd5565b82800160010185558215611cd5579182015b82811115611cd5578251825591602001919060010190611cba565b50611ce1929150611ce5565b5090565b5b80821115611ce15760008155600101611ce6565b6001600160e01b03198116811461080d57600080fd5b600060208284031215611d2257600080fd5b81356116a581611cfa565b6000815180845260005b81811015611d5357602081850181015186830182015201611d37565b81811115611d65576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006116a56020830184611d2d565b600060208284031215611d9f57600080fd5b5035919050565b80356001600160a01b0381168114611dbd57600080fd5b919050565b60008060408385031215611dd557600080fd5b611dde83611da6565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611e1d57611e1d611dec565b604051601f8501601f19908116603f01168101908282118183101715611e4557611e45611dec565b81604052809350858152868686011115611e5e57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611e8957600080fd5b6116a583833560208501611e02565b600080600060608486031215611ead57600080fd5b83359250602084013567ffffffffffffffff80821115611ecc57600080fd5b611ed887838801611e78565b93506040860135915080821115611eee57600080fd5b50611efb86828701611e78565b9150509250925092565b600080600060608486031215611f1a57600080fd5b611f2384611da6565b9250611f3160208501611da6565b9150604084013590509250925092565b60008060408385031215611f5457600080fd5b50508035926020909101359150565b60008060408385031215611f7657600080fd5b823567ffffffffffffffff80821115611f8e57600080fd5b611f9a86838701611e78565b93506020850135915080821115611fb057600080fd5b50611fbd85828601611e78565b9150509250929050565b600080600060408486031215611fdc57600080fd5b833567ffffffffffffffff80821115611ff457600080fd5b9085019060a0828803121561200857600080fd5b9093506020850135908082111561201e57600080fd5b818601915086601f83011261203257600080fd5b81358181111561204157600080fd5b8760208260051b850101111561205657600080fd5b6020830194508093505050509250925092565b6000806040838503121561207c57600080fd5b8235915061208c60208401611da6565b90509250929050565b6000602082840312156120a757600080fd5b6116a582611da6565b600080604083850312156120c357600080fd5b82359150602083013567ffffffffffffffff8111156120e157600080fd5b611fbd85828601611e78565b6000806040838503121561210057600080fd5b61210983611da6565b91506020830135801515811461211e57600080fd5b809150509250929050565b6000806000806080858703121561213f57600080fd5b61214885611da6565b935061215660208601611da6565b925060408501359150606085013567ffffffffffffffff81111561217957600080fd5b8501601f8101871361218a57600080fd5b61219987823560208401611e02565b91505092959194509250565b600080604083850312156121b857600080fd5b6121c183611da6565b915061208c60208401611da6565b600181811c908216806121e357607f821691505b6020821081141561220457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156122c0576122c0612290565b500290565b6000826122e257634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60006020828403121561239657600080fd5b813561ffff811681146116a557600080fd5b6000808335601e198436030181126123bf57600080fd5b83018035915067ffffffffffffffff8211156123da57600080fd5b6020019150368190038213156108c157600080fd5b60008282101561240157612401612290565b500390565b6000821982111561241957612419612290565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906124a390830184611d2d565b9695505050505050565b6000602082840312156124bf57600080fd5b81516116a581611cfa565b634e487b7160e01b600052603260045260246000fd5b60006000198214156124f4576124f4612290565b506001019056fea26469706673582212205b1cf9a475f5ddd79a0ae85ec9f2d1fb297bd8f524117274d0646ec0d32c2cdb64736f6c63430008090033",
  "devdoc": {
    "author": ":   @bretth18 (computerdata) of @catalogworks",
    "details": ":   Upgradeable ERC721 Contract. See interface for further implemntation details. Purpose built for optmization over the Zora V1 contracts. isian (iain nash) of Zora.  ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                           ",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "burns given tokenId, restrited to owner (approved artists should burn?)",
        "params": {
          "_tokenId": "uint256 identifier of token to burn"
        }
      },
      "creator(uint256)": {
        "details": "idk what this should be called, and do we need?",
        "params": {
          "_tokenId": "uint256 identifier of token to get creator for"
        },
        "returns": {
          "_0": "address creator of given tokenId"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "initialize(string,string)": {
        "details": "OZ proxy",
        "params": {
          "_name": "string name of the contract",
          "_symbol": "string symbol of the contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint((string,string,address,address,uint16),bytes32[])": {
        "details": "mints a new token to allowlisted msg.sender with a valid merkle proof. params can and should be changed to calldata for gas efficiency. rename to \"allowlist\"",
        "params": {
          "_data": "TokenData struct, see ITB303",
          "_proof": "bytes32[] merkle proof of artist wallet. this is created off-chain.  e.g (proof = tree.getHexProof(keccak256(address)))"
        },
        "returns": {
          "_0": "uint256 tokenId of minted token (useful since we are not using Enumerable)"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "override, conforms to EIP-2981",
        "params": {
          "_salePrice": "uint256 final sale price of token used to calculate royalty payout",
          "_tokenId": "uint256 token id corresponding to the token of which to get royalty information"
        }
      },
      "royaltyPayoutAddress(uint256)": {
        "details": "not part of EIP2981, but useful ",
        "params": {
          "_tokenId": "uint256 identifier of token to get royalty payout address for"
        },
        "returns": {
          "_0": "address royalty payout address of given tokenId"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "override ",
        "params": {
          "interfaceId": "bytes4 id of interface to check"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenContentURI(uint256)": {
        "details": "basic public getter method for content URI",
        "params": {
          "_tokenId": "uint256 identifier of token to get content URI for"
        },
        "returns": {
          "_0": "string content URI for given tokenId"
        }
      },
      "tokenURI(uint256)": {
        "details": "override function, returns metadataURI of token stored in tokenData",
        "params": {
          "_tokenId": "uint256 token id corresponding to the token of which to get metadata from"
        },
        "returns": {
          "_0": "string containing metadata URI"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMetadataURI(uint256,string)": {
        "details": "access controlled, restricted to contract owner when they own the tokenId or the creator (when they own the token)",
        "params": {
          "_metadataURI": "string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)",
          "_tokenId": "uint256 token id corresponding to the token to update"
        }
      },
      "updateRoot(bytes32)": {
        "details": "access controlled function, restricted to owner/admim.",
        "params": {
          "_newRoot": "bytes32 containing the new root hash, generated off-chain"
        }
      },
      "updateRoyaltyInfo(uint256,address)": {
        "details": "access controlled to owner only, subject to change. this function allows for emergency royalty control (i.e compromised wallet)",
        "params": {
          "_royaltyPayoutAddress": "address of new royalty payout address",
          "_tokenId": "uint256 token id corresponding to the token of which to update royalty payout"
        }
      },
      "updateTokenURIs(uint256,string,string)": {
        "details": "access controlled function, restricted to owner/admim. subject to change.",
        "params": {
          "_contentURI": "string containing new/updated media content (subject to change, new EIP)",
          "_metadataURI": "string containing new/updated metadata (e.g IPFS URI pointing to metadata.json)",
          "_tokenId": "uint256 token id corresponding to the token to update"
        }
      }
    },
    "title": ":   TB303",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MetadataUpdated(uint256,string)": {
        "notice": "Events"
      },
      "merkleRootUpdated(bytes32)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burn Function"
      },
      "creator(uint256)": {
        "notice": "creator Function"
      },
      "initialize(string,string)": {
        "notice": "initialize FunctionInitializes contract with default values, acts as a constructor"
      },
      "merkleRoot()": {
        "notice": "State variable containing merkle root  see {IAngelaList}"
      },
      "mint((string,string,address,address,uint16),bytes32[])": {
        "notice": "mint Function"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "royaltyInfo Function"
      },
      "royaltyPayoutAddress(uint256)": {
        "notice": "royaltyPayoutAddress Function"
      },
      "supportsInterface(bytes4)": {
        "notice": "supportsInterface Function"
      },
      "tokenContentURI(uint256)": {
        "notice": "tokenContentURI Functioncan be retrofitted/replaced with proposed draft 'content' EIP "
      },
      "tokenMetadataURIs(uint256)": {
        "notice": "Mappings"
      },
      "tokenURI(uint256)": {
        "notice": "tokenURI Function"
      },
      "updateMetadataURI(uint256,string)": {
        "notice": "updateMetadataURI Function"
      },
      "updateRoot(bytes32)": {
        "notice": "updateRoot Functionthis function is inherits from Angela.sol, and may not be necessary depending on role based configuration."
      },
      "updateRoyaltyInfo(uint256,address)": {
        "notice": "updateRoyaltyInfo Function"
      },
      "updateTokenURIs(uint256,string,string)": {
        "notice": "updateTokenURIs Function"
      }
    },
    "notice": "-------------------------------------------------------------------------------------------------------------------- ooooooooooooo oooooooooo.    .oooo.     .oooo.     .oooo.    8'   888   `8 `888'   `Y8b .dP\"\"Y88b   d8P'`Y8b  .dP\"\"Y88b   888       888     888       ]8P' 888    888       ]8P'  888       888oooo888'     <88b.  888    888     <88b.   888       888    `88b      `88b. 888    888      `88b.  888       888    .88P o.   .88P  `88b  d88' o.   .88P   o888o     o888bood8P'  `8bd88P'    `Y8bd8P'  `8bd88P'          ************************************************ LEGAL DISCLAIMER: <legal go here>************************************************ ---------------------------------------------------------------------------------------------------------------------                                                                                                                                                                                                                                                                                                                            RINKEBY CNFT (V0: CODENAME \"TB303\") \"TB303\"                     :   Creator Shared NFT Media Contract for Catalog Records Inc.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 153,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 156,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1503,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1914,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 222,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 224,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 228,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 232,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 236,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 242,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1053,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1937,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "201",
        "type": "t_bytes32"
      },
      {
        "astId": 3530,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "tokenMetadataURIs",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3536,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "tokenData",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_struct(TokenData)4779_storage)"
      },
      {
        "astId": 3539,
        "contract": "contracts/catalog/TB303.sol:TB303",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(Counter)1510_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenData)4779_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITB303.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)4779_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1510_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1509,
            "contract": "contracts/catalog/TB303.sol:TB303",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)4779_storage": {
        "encoding": "inplace",
        "label": "struct ITB303.TokenData",
        "members": [
          {
            "astId": 4770,
            "contract": "contracts/catalog/TB303.sol:TB303",
            "label": "metadataURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4772,
            "contract": "contracts/catalog/TB303.sol:TB303",
            "label": "contentURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4774,
            "contract": "contracts/catalog/TB303.sol:TB303",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4776,
            "contract": "contracts/catalog/TB303.sol:TB303",
            "label": "royaltyPayout",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4778,
            "contract": "contracts/catalog/TB303.sol:TB303",
            "label": "royaltyBPS",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}